
BT_cassaforte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e0  080053e0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e8  080053e8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000254  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e191  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff9  00000000  00000000  00015229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  00017228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000985  00000000  00000000  00017e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec75  00000000  00000000  000187ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f495  00000000  00000000  00037462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8cb7  00000000  00000000  000468f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff5ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003928  00000000  00000000  000ff5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00102f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005330 	.word	0x08005330

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08005330 	.word	0x08005330

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback per la ricezione UART completata
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]

	if(rx_char != '\r' && rx_char != '\n')
 80001e4:	4b19      	ldr	r3, [pc, #100]	@ (800024c <HAL_UART_RxCpltCallback+0x70>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b0d      	cmp	r3, #13
 80001ea:	d026      	beq.n	800023a <HAL_UART_RxCpltCallback+0x5e>
 80001ec:	4b17      	ldr	r3, [pc, #92]	@ (800024c <HAL_UART_RxCpltCallback+0x70>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b0a      	cmp	r3, #10
 80001f2:	d022      	beq.n	800023a <HAL_UART_RxCpltCallback+0x5e>
	{
		if(rx_index < BUFFER_SIZE - 1)
 80001f4:	4b16      	ldr	r3, [pc, #88]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b08      	cmp	r3, #8
 80001fa:	d81b      	bhi.n	8000234 <HAL_UART_RxCpltCallback+0x58>
		{
			rx_buffer[rx_index++] = rx_char;
 80001fc:	4b14      	ldr	r3, [pc, #80]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	1c5a      	adds	r2, r3, #1
 8000202:	b2d1      	uxtb	r1, r2
 8000204:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 8000206:	7011      	strb	r1, [r2, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <HAL_UART_RxCpltCallback+0x70>)
 800020c:	7819      	ldrb	r1, [r3, #0]
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <HAL_UART_RxCpltCallback+0x78>)
 8000210:	5499      	strb	r1, [r3, r2]

			if(rx_index >= 4)
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b03      	cmp	r3, #3
 8000218:	d90f      	bls.n	800023a <HAL_UART_RxCpltCallback+0x5e>
			{
				rx_buffer[rx_index] = '\0';
 800021a:	4b0d      	ldr	r3, [pc, #52]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	461a      	mov	r2, r3
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <HAL_UART_RxCpltCallback+0x78>)
 8000222:	2100      	movs	r1, #0
 8000224:	5499      	strb	r1, [r3, r2]
				rx_complete = 1;
 8000226:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <HAL_UART_RxCpltCallback+0x7c>)
 8000228:	2201      	movs	r2, #1
 800022a:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e002      	b.n	800023a <HAL_UART_RxCpltCallback+0x5e>
			}
		}
		else
		{
			rx_index = 0;
 8000234:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <HAL_UART_RxCpltCallback+0x74>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_UART_Receive_IT(&huart4, &rx_char, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	4903      	ldr	r1, [pc, #12]	@ (800024c <HAL_UART_RxCpltCallback+0x70>)
 800023e:	4807      	ldr	r0, [pc, #28]	@ (800025c <HAL_UART_RxCpltCallback+0x80>)
 8000240:	f003 f9ea 	bl	8003618 <HAL_UART_Receive_IT>

}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000158 	.word	0x20000158
 8000250:	20000166 	.word	0x20000166
 8000254:	2000015c 	.word	0x2000015c
 8000258:	20000167 	.word	0x20000167
 800025c:	200000d0 	.word	0x200000d0

08000260 <_write>:

int _write(int file, char *ptr, int len)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	b29a      	uxth	r2, r3
 8000270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000274:	68b9      	ldr	r1, [r7, #8]
 8000276:	4804      	ldr	r0, [pc, #16]	@ (8000288 <_write+0x28>)
 8000278:	f003 f945 	bl	8003506 <HAL_UART_Transmit>
    return len;
 800027c:	687b      	ldr	r3, [r7, #4]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200000d0 	.word	0x200000d0

0800028c <main>:
/* USER CODE END 0 */

int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  HAL_Init();
 8000292:	f000 fb6f 	bl	8000974 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  SystemClock_Config();
 8000296:	f000 f893 	bl	80003c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  MX_GPIO_Init();
 800029a:	f000 f95b 	bl	8000554 <MX_GPIO_Init>
  MX_TIM2_Init();
 800029e:	f000 f8e5 	bl	800046c <MX_TIM2_Init>
  MX_UART4_Init();
 80002a2:	f000 f927 	bl	80004f4 <MX_UART4_Init>

  /* USER CODE BEGIN 2 */
  printf("Connessione alla cassaforte effettuata \r\n");
 80002a6:	483c      	ldr	r0, [pc, #240]	@ (8000398 <main+0x10c>)
 80002a8:	f004 fcae 	bl	8004c08 <puts>
  printf("Inserire combinazione (max 4 caratteri)\r\n");
 80002ac:	483b      	ldr	r0, [pc, #236]	@ (800039c <main+0x110>)
 80002ae:	f004 fcab 	bl	8004c08 <puts>

  memset(rx_buffer, 0, BUFFER_SIZE);
 80002b2:	220a      	movs	r2, #10
 80002b4:	2100      	movs	r1, #0
 80002b6:	483a      	ldr	r0, [pc, #232]	@ (80003a0 <main+0x114>)
 80002b8:	f004 fcae 	bl	8004c18 <memset>
  rx_index = 0;
 80002bc:	4b39      	ldr	r3, [pc, #228]	@ (80003a4 <main+0x118>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
  rx_complete = 0;
 80002c2:	4b39      	ldr	r3, [pc, #228]	@ (80003a8 <main+0x11c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart4, &rx_char, 1);
 80002c8:	2201      	movs	r2, #1
 80002ca:	4938      	ldr	r1, [pc, #224]	@ (80003ac <main+0x120>)
 80002cc:	4838      	ldr	r0, [pc, #224]	@ (80003b0 <main+0x124>)
 80002ce:	f003 f9a3 	bl	8003618 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002d2:	2100      	movs	r1, #0
 80002d4:	4837      	ldr	r0, [pc, #220]	@ (80003b4 <main+0x128>)
 80002d6:	f002 fb1d 	bl	8002914 <HAL_TIM_PWM_Start>

  uint8_t servo_angle_90 = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(rx_complete)
 80002de:	4b32      	ldr	r3, [pc, #200]	@ (80003a8 <main+0x11c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d053      	beq.n	800038e <main+0x102>
    {
        rx_complete = 0;
 80002e6:	4b30      	ldr	r3, [pc, #192]	@ (80003a8 <main+0x11c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]

        if(strcmp((char*)rx_buffer, "1234") == 0)
 80002ec:	4932      	ldr	r1, [pc, #200]	@ (80003b8 <main+0x12c>)
 80002ee:	482c      	ldr	r0, [pc, #176]	@ (80003a0 <main+0x114>)
 80002f0:	f7ff ff6a 	bl	80001c8 <strcmp>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d12b      	bne.n	8000352 <main+0xc6>
        {
            for(int i = 0; i < 2; i++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	e012      	b.n	8000326 <main+0x9a>
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2102      	movs	r1, #2
 8000304:	482d      	ldr	r0, [pc, #180]	@ (80003bc <main+0x130>)
 8000306:	f000 fec7 	bl	8001098 <HAL_GPIO_WritePin>
                HAL_Delay(200);
 800030a:	20c8      	movs	r0, #200	@ 0xc8
 800030c:	f000 fb98 	bl	8000a40 <HAL_Delay>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2102      	movs	r1, #2
 8000314:	4829      	ldr	r0, [pc, #164]	@ (80003bc <main+0x130>)
 8000316:	f000 febf 	bl	8001098 <HAL_GPIO_WritePin>
                HAL_Delay(200);
 800031a:	20c8      	movs	r0, #200	@ 0xc8
 800031c:	f000 fb90 	bl	8000a40 <HAL_Delay>
            for(int i = 0; i < 2; i++)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3301      	adds	r3, #1
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	2b01      	cmp	r3, #1
 800032a:	dde9      	ble.n	8000300 <main+0x74>
            }

            if(servo_angle_90 == 0)
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <main+0xb6>
            {
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
 8000332:	4b20      	ldr	r3, [pc, #128]	@ (80003b4 <main+0x128>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800033a:	635a      	str	r2, [r3, #52]	@ 0x34
                servo_angle_90 = 1;
 800033c:	2301      	movs	r3, #1
 800033e:	73fb      	strb	r3, [r7, #15]
 8000340:	e020      	b.n	8000384 <main+0xf8>
            }
            else
            {
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8000342:	4b1c      	ldr	r3, [pc, #112]	@ (80003b4 <main+0x128>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800034a:	635a      	str	r2, [r3, #52]	@ 0x34
                servo_angle_90 = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e018      	b.n	8000384 <main+0xf8>
            }
        }
        else
        {
            for(int i = 0; i < 2; i++)
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e012      	b.n	800037e <main+0xf2>
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2101      	movs	r1, #1
 800035c:	4817      	ldr	r0, [pc, #92]	@ (80003bc <main+0x130>)
 800035e:	f000 fe9b 	bl	8001098 <HAL_GPIO_WritePin>
                HAL_Delay(200);
 8000362:	20c8      	movs	r0, #200	@ 0xc8
 8000364:	f000 fb6c 	bl	8000a40 <HAL_Delay>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2101      	movs	r1, #1
 800036c:	4813      	ldr	r0, [pc, #76]	@ (80003bc <main+0x130>)
 800036e:	f000 fe93 	bl	8001098 <HAL_GPIO_WritePin>
                HAL_Delay(200);
 8000372:	20c8      	movs	r0, #200	@ 0xc8
 8000374:	f000 fb64 	bl	8000a40 <HAL_Delay>
            for(int i = 0; i < 2; i++)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	dde9      	ble.n	8000358 <main+0xcc>
            }
        }

        memset(rx_buffer, 0, BUFFER_SIZE);
 8000384:	220a      	movs	r2, #10
 8000386:	2100      	movs	r1, #0
 8000388:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <main+0x114>)
 800038a:	f004 fc45 	bl	8004c18 <memset>
    }

    HAL_Delay(10);
 800038e:	200a      	movs	r0, #10
 8000390:	f000 fb56 	bl	8000a40 <HAL_Delay>
    if(rx_complete)
 8000394:	e7a3      	b.n	80002de <main+0x52>
 8000396:	bf00      	nop
 8000398:	08005348 	.word	0x08005348
 800039c:	08005374 	.word	0x08005374
 80003a0:	2000015c 	.word	0x2000015c
 80003a4:	20000166 	.word	0x20000166
 80003a8:	20000167 	.word	0x20000167
 80003ac:	20000158 	.word	0x20000158
 80003b0:	200000d0 	.word	0x200000d0
 80003b4:	20000084 	.word	0x20000084
 80003b8:	080053a0 	.word	0x080053a0
 80003bc:	48000400 	.word	0x48000400

080003c0 <SystemClock_Config>:
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09e      	sub	sp, #120	@ 0x78
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003ca:	2228      	movs	r2, #40	@ 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f004 fc22 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	223c      	movs	r2, #60	@ 0x3c
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f004 fc14 	bl	8004c18 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f0:	2302      	movs	r3, #2
 80003f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2310      	movs	r3, #16
 80003fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000400:	2300      	movs	r3, #0
 8000402:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000404:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000408:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800040a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fe5a 	bl	80010c8 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x5e>
 800041a:	f000 f8e5 	bl	80005e8 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	230f      	movs	r3, #15
 8000420:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	2302      	movs	r3, #2
 8000424:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800042e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8000434:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000438:	2102      	movs	r1, #2
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fe52 	bl	80020e4 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x8a>
 8000446:	f000 f8cf 	bl	80005e8 <Error_Handler>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800044a:	2308      	movs	r3, #8
 800044c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8000452:	463b      	mov	r3, r7
 8000454:	4618      	mov	r0, r3
 8000456:	f002 f857 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0xa4>
 8000460:	f000 f8c2 	bl	80005e8 <Error_Handler>
}
 8000464:	bf00      	nop
 8000466:	3778      	adds	r7, #120	@ 0x78
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]
 8000482:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_TIM2_Init+0x84>)
 8000486:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800048a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_TIM2_Init+0x84>)
 800048e:	2247      	movs	r2, #71	@ 0x47
 8000490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_TIM2_Init+0x84>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000498:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_TIM2_Init+0x84>)
 800049a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800049e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_TIM2_Init+0x84>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a6:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <MX_TIM2_Init+0x84>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) { Error_Handler(); }
 80004ac:	4810      	ldr	r0, [pc, #64]	@ (80004f0 <MX_TIM2_Init+0x84>)
 80004ae:	f002 f9d9 	bl	8002864 <HAL_TIM_PWM_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0x50>
 80004b8:	f000 f896 	bl	80005e8 <Error_Handler>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004bc:	2360      	movs	r3, #96	@ 0x60
 80004be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	4619      	mov	r1, r3
 80004d2:	4807      	ldr	r0, [pc, #28]	@ (80004f0 <MX_TIM2_Init+0x84>)
 80004d4:	f002 fb1e 	bl	8002b14 <HAL_TIM_PWM_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0x76>
 80004de:	f000 f883 	bl	80005e8 <Error_Handler>

  HAL_TIM_MspPostInit(&htim2);
 80004e2:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <MX_TIM2_Init+0x84>)
 80004e4:	f000 f8c8 	bl	8000678 <HAL_TIM_MspPostInit>
}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000084 	.word	0x20000084

080004f4 <MX_UART4_Init>:

static void MX_UART4_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <MX_UART4_Init+0x58>)
 80004fa:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <MX_UART4_Init+0x5c>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_UART4_Init+0x58>)
 8000500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000504:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_UART4_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_UART4_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_UART4_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_UART4_Init+0x58>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_UART4_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_UART4_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_UART4_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_UART4_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK) { Error_Handler(); }
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <MX_UART4_Init+0x58>)
 8000538:	f002 ff97 	bl	800346a <HAL_UART_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_UART4_Init+0x52>
 8000542:	f000 f851 	bl	80005e8 <Error_Handler>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000d0 	.word	0x200000d0
 8000550:	40004c00 	.word	0x40004c00

08000554 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 80005a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2103      	movs	r1, #3
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_GPIO_Init+0x90>)
 80005b8:	f000 fd6e 	bl	8001098 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005bc:	2303      	movs	r3, #3
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <MX_GPIO_Init+0x90>)
 80005d4:	f000 fbe6 	bl	8000da4 <HAL_GPIO_Init>
}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400

080005e8 <Error_Handler>:

void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  __disable_irq();
  while (1) { }
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <Error_Handler+0x8>

080005f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <HAL_MspInit+0x44>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_MspInit+0x44>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <HAL_MspInit+0x44>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <HAL_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800064c:	d10b      	bne.n	8000666 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <HAL_TIM_PWM_MspInit+0x38>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <HAL_TIM_PWM_MspInit+0x38>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_TIM_PWM_MspInit+0x38>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000698:	d11c      	bne.n	80006d4 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <HAL_TIM_MspPostInit+0x64>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <HAL_TIM_MspPostInit+0x64>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <HAL_TIM_MspPostInit+0x64>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	2301      	movs	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d0:	f000 fb68 	bl	8000da4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <HAL_UART_MspInit+0x8c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d130      	bne.n	8000764 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000702:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <HAL_UART_MspInit+0x90>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a1a      	ldr	r2, [pc, #104]	@ (8000770 <HAL_UART_MspInit+0x90>)
 8000708:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <HAL_UART_MspInit+0x90>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_UART_MspInit+0x90>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <HAL_UART_MspInit+0x90>)
 8000720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_UART_MspInit+0x90>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000732:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000744:	2305      	movs	r3, #5
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4809      	ldr	r0, [pc, #36]	@ (8000774 <HAL_UART_MspInit+0x94>)
 8000750:	f000 fb28 	bl	8000da4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2034      	movs	r0, #52	@ 0x34
 800075a:	f000 fa70 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800075e:	2034      	movs	r0, #52	@ 0x34
 8000760:	f000 fa89 	bl	8000c76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40004c00 	.word	0x40004c00
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <MemManage_Handler+0x4>

08000790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f917 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80007dc:	4802      	ldr	r0, [pc, #8]	@ (80007e8 <UART4_IRQHandler+0x10>)
 80007de:	f002 ff5f 	bl	80036a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000d0 	.word	0x200000d0

080007ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
  }

  return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800084e:	605a      	str	r2, [r3, #4]
  return 0;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <_isatty>:

int _isatty(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000898:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <_sbrk+0x5c>)
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <_sbrk+0x60>)
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <_sbrk+0x64>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <_sbrk+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d207      	bcs.n	80008d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c0:	f004 f9b2 	bl	8004c28 <__errno>
 80008c4:	4603      	mov	r3, r0
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ce:	e009      	b.n	80008e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <_sbrk+0x64>)
 80008e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000a000 	.word	0x2000a000
 80008f0:	00000400 	.word	0x00000400
 80008f4:	20000168 	.word	0x20000168
 80008f8:	200002c0 	.word	0x200002c0

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	@ (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000958 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff ffea 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	@ (8000960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	@ (800096c <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f004 f971 	bl	8004c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000952:	f7ff fc9b 	bl	800028c <main>

08000956 <LoopForever>:

LoopForever:
    b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000958:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000964:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8000968:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800096c:	200002bc 	.word	0x200002bc

08000970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>
	...

08000974 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_Init+0x28>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_Init+0x28>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f94f 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff fe30 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f967 	bl	8000c92 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009dc:	f000 f92f 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	2000016c 	.word	0x2000016c

08000a28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000016c 	.word	0x2000016c

08000a40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff ffee 	bl	8000a28 <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffde 	bl	8000a28 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	@ (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	@ 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff3e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e02e      	b.n	8000d1a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d008      	beq.n	8000cd8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e020      	b.n	8000d1a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 020e 	bic.w	r2, r2, #14
 8000ce6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d005      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e027      	b.n	8000d98 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 020e 	bic.w	r2, r2, #14
 8000d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	4798      	blx	r3
    }
  }
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	e154      	b.n	800105e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8146 	beq.w	8001058 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x40>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d017      	beq.n	8000e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0203 	and.w	r2, r3, #3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80a0 	beq.w	8001058 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b58      	ldr	r3, [pc, #352]	@ (800107c <HAL_GPIO_Init+0x2d8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a57      	ldr	r2, [pc, #348]	@ (800107c <HAL_GPIO_Init+0x2d8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b55      	ldr	r3, [pc, #340]	@ (800107c <HAL_GPIO_Init+0x2d8>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f30:	4a53      	ldr	r2, [pc, #332]	@ (8001080 <HAL_GPIO_Init+0x2dc>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f5a:	d019      	beq.n	8000f90 <HAL_GPIO_Init+0x1ec>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a49      	ldr	r2, [pc, #292]	@ (8001084 <HAL_GPIO_Init+0x2e0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <HAL_GPIO_Init+0x1e8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <HAL_GPIO_Init+0x2e4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d00d      	beq.n	8000f88 <HAL_GPIO_Init+0x1e4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a47      	ldr	r2, [pc, #284]	@ (800108c <HAL_GPIO_Init+0x2e8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x1e0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a46      	ldr	r2, [pc, #280]	@ (8001090 <HAL_GPIO_Init+0x2ec>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d101      	bne.n	8000f80 <HAL_GPIO_Init+0x1dc>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	e008      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f80:	2305      	movs	r3, #5
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa2:	4937      	ldr	r1, [pc, #220]	@ (8001080 <HAL_GPIO_Init+0x2dc>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fda:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ffe:	4a25      	ldr	r2, [pc, #148]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001028:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001052:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f aea3 	bne.w	8000db4 <HAL_GPIO_Init+0x10>
  }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48001000 	.word	0x48001000
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f000 bff4 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 816d 	beq.w	80013de <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001104:	4bb4      	ldr	r3, [pc, #720]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b04      	cmp	r3, #4
 800110e:	d00c      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001110:	4bb1      	ldr	r3, [pc, #708]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d157      	bne.n	80011cc <HAL_RCC_OscConfig+0x104>
 800111c:	4bae      	ldr	r3, [pc, #696]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001128:	d150      	bne.n	80011cc <HAL_RCC_OscConfig+0x104>
 800112a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800112e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800113e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b3f      	cmp	r3, #63	@ 0x3f
 800114a:	d802      	bhi.n	8001152 <HAL_RCC_OscConfig+0x8a>
 800114c:	4ba2      	ldr	r3, [pc, #648]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0xb6>
 8001152:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001156:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001166:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800116a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800116e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800117a:	4b97      	ldr	r3, [pc, #604]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001182:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001186:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800118a:	fa92 f2a2 	rbit	r2, r2
 800118e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001192:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f002 021f 	and.w	r2, r2, #31
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8114 	beq.w	80013dc <HAL_RCC_OscConfig+0x314>
 80011b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f040 810b 	bne.w	80013dc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f000 bf85 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011dc:	d106      	bne.n	80011ec <HAL_RCC_OscConfig+0x124>
 80011de:	4b7e      	ldr	r3, [pc, #504]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7d      	ldr	r2, [pc, #500]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e036      	b.n	800125a <HAL_RCC_OscConfig+0x192>
 80011ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10c      	bne.n	8001216 <HAL_RCC_OscConfig+0x14e>
 80011fc:	4b76      	ldr	r3, [pc, #472]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a75      	ldr	r2, [pc, #468]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b73      	ldr	r3, [pc, #460]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a72      	ldr	r2, [pc, #456]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e021      	b.n	800125a <HAL_RCC_OscConfig+0x192>
 8001216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800121a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x17a>
 8001228:	4b6b      	ldr	r3, [pc, #428]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a6a      	ldr	r2, [pc, #424]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800122e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a67      	ldr	r2, [pc, #412]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x192>
 8001242:	4b65      	ldr	r3, [pc, #404]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a64      	ldr	r2, [pc, #400]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b62      	ldr	r3, [pc, #392]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a61      	ldr	r2, [pc, #388]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800125a:	4b5f      	ldr	r3, [pc, #380]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 800125c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125e:	f023 020f 	bic.w	r2, r3, #15
 8001262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	495a      	ldr	r1, [pc, #360]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001270:	4313      	orrs	r3, r2
 8001272:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d054      	beq.n	800132e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fbd0 	bl	8000a28 <HAL_GetTick>
 8001288:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128e:	f7ff fbcb 	bl	8000a28 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d902      	bls.n	80012a4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	f000 bf19 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
 80012a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012a8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80012b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c4:	d802      	bhi.n	80012cc <HAL_RCC_OscConfig+0x204>
 80012c6:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	e015      	b.n	80012f8 <HAL_RCC_OscConfig+0x230>
 80012cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80012e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80012e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80012f4:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012fc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001300:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001304:	fa92 f2a2 	rbit	r2, r2
 8001308:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800130c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001310:	fab2 f282 	clz	r2, r2
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	f002 021f 	and.w	r2, r2, #31
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0b0      	beq.n	800128e <HAL_RCC_OscConfig+0x1c6>
 800132c:	e057      	b.n	80013de <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fb7b 	bl	8000a28 <HAL_GetTick>
 8001332:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fb76 	bl	8000a28 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	@ 0x64
 8001346:	d902      	bls.n	800134e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	f000 bec4 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
 800134e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001352:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001362:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b3f      	cmp	r3, #63	@ 0x3f
 800136e:	d802      	bhi.n	8001376 <HAL_RCC_OscConfig+0x2ae>
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x2da>
 8001376:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800137a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800138a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800138e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001392:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_RCC_OscConfig+0x310>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013a6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80013aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013ae:	fa92 f2a2 	rbit	r2, r2
 80013b2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80013b6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80013ba:	fab2 f282 	clz	r2, r2
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f042 0220 	orr.w	r2, r2, #32
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f002 021f 	and.w	r2, r2, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1b0      	bne.n	8001338 <HAL_RCC_OscConfig+0x270>
 80013d6:	e002      	b.n	80013de <HAL_RCC_OscConfig+0x316>
 80013d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 816c 	beq.w	80016cc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013f4:	4bcc      	ldr	r3, [pc, #816]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001400:	4bc9      	ldr	r3, [pc, #804]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d16d      	bne.n	80014e8 <HAL_RCC_OscConfig+0x420>
 800140c:	4bc6      	ldr	r3, [pc, #792]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d167      	bne.n	80014e8 <HAL_RCC_OscConfig+0x420>
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800142a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b3f      	cmp	r3, #63	@ 0x3f
 8001436:	d802      	bhi.n	800143e <HAL_RCC_OscConfig+0x376>
 8001438:	4bbb      	ldr	r3, [pc, #748]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	e013      	b.n	8001466 <HAL_RCC_OscConfig+0x39e>
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001456:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001462:	4bb1      	ldr	r3, [pc, #708]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	2202      	movs	r2, #2
 8001468:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800146c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001470:	fa92 f2a2 	rbit	r2, r2
 8001474:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001478:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800147c:	fab2 f282 	clz	r2, r2
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f002 021f 	and.w	r2, r2, #31
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f202 	lsl.w	r2, r1, r2
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00a      	beq.n	80014ae <HAL_RCC_OscConfig+0x3e6>
 8001498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f000 be14 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	21f8      	movs	r1, #248	@ 0xf8
 80014c4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80014cc:	fa91 f1a1 	rbit	r1, r1
 80014d0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80014d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80014d8:	fab1 f181 	clz	r1, r1
 80014dc:	b2c9      	uxtb	r1, r1
 80014de:	408b      	lsls	r3, r1
 80014e0:	4991      	ldr	r1, [pc, #580]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e0f1      	b.n	80016cc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8083 	beq.w	8001600 <HAL_RCC_OscConfig+0x538>
 80014fa:	2301      	movs	r3, #1
 80014fc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800150c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800151a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fa7f 	bl	8000a28 <HAL_GetTick>
 800152a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fa7a 	bl	8000a28 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d902      	bls.n	8001546 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	f000 bdc8 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001558:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b3f      	cmp	r3, #63	@ 0x3f
 8001564:	d802      	bhi.n	800156c <HAL_RCC_OscConfig+0x4a4>
 8001566:	4b70      	ldr	r3, [pc, #448]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e013      	b.n	8001594 <HAL_RCC_OscConfig+0x4cc>
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001584:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001590:	4b65      	ldr	r3, [pc, #404]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	2202      	movs	r2, #2
 8001596:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800159a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800159e:	fa92 f2a2 	rbit	r2, r2
 80015a2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80015a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80015aa:	fab2 f282 	clz	r2, r2
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f002 021f 	and.w	r2, r2, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0b4      	beq.n	8001530 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	21f8      	movs	r1, #248	@ 0xf8
 80015dc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80015e4:	fa91 f1a1 	rbit	r1, r1
 80015e8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80015ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80015f0:	fab1 f181 	clz	r1, r1
 80015f4:	b2c9      	uxtb	r1, r1
 80015f6:	408b      	lsls	r3, r1
 80015f8:	494b      	ldr	r1, [pc, #300]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
 80015fe:	e065      	b.n	80016cc <HAL_RCC_OscConfig+0x604>
 8001600:	2301      	movs	r3, #1
 8001602:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001612:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001620:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	2300      	movs	r3, #0
 800162a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff f9fc 	bl	8000a28 <HAL_GetTick>
 8001630:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff f9f7 	bl	8000a28 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d902      	bls.n	800164c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	f000 bd45 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800165e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b3f      	cmp	r3, #63	@ 0x3f
 800166a:	d802      	bhi.n	8001672 <HAL_RCC_OscConfig+0x5aa>
 800166c:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	e013      	b.n	800169a <HAL_RCC_OscConfig+0x5d2>
 8001672:	2302      	movs	r3, #2
 8001674:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800168a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_RCC_OscConfig+0x660>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	2202      	movs	r2, #2
 800169c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80016a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80016a4:	fa92 f2a2 	rbit	r2, r2
 80016a8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80016ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80016b0:	fab2 f282 	clz	r2, r2
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	f002 021f 	and.w	r2, r2, #31
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1b4      	bne.n	8001636 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8115 	beq.w	800190c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d07e      	beq.n	80017f0 <HAL_RCC_OscConfig+0x728>
 80016f2:	2301      	movs	r3, #1
 80016f4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x664>)
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	461a      	mov	r2, r3
 8001718:	2301      	movs	r3, #1
 800171a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff f984 	bl	8000a28 <HAL_GetTick>
 8001720:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001724:	e00f      	b.n	8001746 <HAL_RCC_OscConfig+0x67e>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f97a 	bl	8000a28 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d902      	bls.n	8001746 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bcc8 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001768:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001784:	2202      	movs	r2, #2
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800179e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80017a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017ac:	2102      	movs	r1, #2
 80017ae:	6019      	str	r1, [r3, #0]
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f1a3 	rbit	r1, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017c6:	6019      	str	r1, [r3, #0]
  return result;
 80017c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0a0      	beq.n	8001730 <HAL_RCC_OscConfig+0x668>
 80017ee:	e08d      	b.n	800190c <HAL_RCC_OscConfig+0x844>
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001800:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001812:	601a      	str	r2, [r3, #0]
  return result;
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800181c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4b90      	ldr	r3, [pc, #576]	@ (8001a68 <HAL_RCC_OscConfig+0x9a0>)
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	461a      	mov	r2, r3
 800182e:	2300      	movs	r3, #0
 8001830:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff f8f9 	bl	8000a28 <HAL_GetTick>
 8001836:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff f8f4 	bl	8000a28 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d902      	bls.n	8001852 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	f000 bc42 	b.w	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001856:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001862:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001870:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001886:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001894:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018be:	4b69      	ldr	r3, [pc, #420]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80018c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018ca:	2102      	movs	r1, #2
 80018cc:	6019      	str	r1, [r3, #0]
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f1a3 	rbit	r1, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018e4:	6019      	str	r1, [r3, #0]
  return result;
 80018e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d197      	bne.n	800183c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 819e 	beq.w	8001c5e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001928:	4b4e      	ldr	r3, [pc, #312]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d116      	bne.n	8001962 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	4b4b      	ldr	r3, [pc, #300]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	4a4a      	ldr	r2, [pc, #296]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193e:	61d3      	str	r3, [r2, #28]
 8001940:	4b48      	ldr	r3, [pc, #288]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001956:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800195a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <HAL_RCC_OscConfig+0x9a4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_RCC_OscConfig+0x9a4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a3e      	ldr	r2, [pc, #248]	@ (8001a6c <HAL_RCC_OscConfig+0x9a4>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001978:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff f855 	bl	8000a28 <HAL_GetTick>
 800197e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	e009      	b.n	8001998 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001984:	f7ff f850 	bl	8000a28 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	@ 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e39e      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <HAL_RCC_OscConfig+0x9a4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x8fa>
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e035      	b.n	8001a2e <HAL_RCC_OscConfig+0x966>
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x924>
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e020      	b.n	8001a2e <HAL_RCC_OscConfig+0x966>
 80019ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x94e>
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x966>
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <HAL_RCC_OscConfig+0x99c>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7fe fff2 	bl	8000a28 <HAL_GetTick>
 8001a44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	e012      	b.n	8001a70 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7fe ffed 	bl	8000a28 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e339      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	10908120 	.word	0x10908120
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a98:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ac0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xa10>
 8001ad2:	4b98      	ldr	r3, [pc, #608]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	e013      	b.n	8001b00 <HAL_RCC_OscConfig+0xa38>
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b8d      	ldr	r3, [pc, #564]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b04:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b08:	2102      	movs	r1, #2
 8001b0a:	6011      	str	r1, [r2, #0]
 8001b0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	fa92 f1a2 	rbit	r1, r2
 8001b1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b1e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b22:	6011      	str	r1, [r2, #0]
  return result;
 8001b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b28:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f43f af7f 	beq.w	8001a4a <HAL_RCC_OscConfig+0x982>
 8001b4c:	e07d      	b.n	8001c4a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4e:	f7fe ff6b 	bl	8000a28 <HAL_GetTick>
 8001b52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7fe ff66 	bl	8000a28 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e2b2      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b78:	2202      	movs	r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b80:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bb6:	601a      	str	r2, [r3, #0]
  return result;
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xb10>
 8001bd2:	4b58      	ldr	r3, [pc, #352]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	e013      	b.n	8001c00 <HAL_RCC_OscConfig+0xb38>
 8001bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bdc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001be0:	2202      	movs	r2, #2
 8001be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c04:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c08:	2102      	movs	r1, #2
 8001c0a:	6011      	str	r1, [r2, #0]
 8001c0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c10:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	fa92 f1a2 	rbit	r1, r2
 8001c1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c1e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c22:	6011      	str	r1, [r2, #0]
  return result;
 8001c24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c28:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f002 021f 	and.w	r2, r2, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d186      	bne.n	8001b58 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c4a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a37      	ldr	r2, [pc, #220]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8232 	beq.w	80020d4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	f000 8201 	beq.w	8002080 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	f040 8157 	bne.w	8001f3e <HAL_RCC_OscConfig+0xe76>
 8001c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c94:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cb4:	601a      	str	r2, [r3, #0]
  return result;
 8001cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cbe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fea7 	bl	8000a28 <HAL_GetTick>
 8001cda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	e009      	b.n	8001cf4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe fea2 	bl	8000a28 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1f0      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d18:	601a      	str	r2, [r3, #0]
  return result;
 8001d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d2c:	d804      	bhi.n	8001d38 <HAL_RCC_OscConfig+0xc70>
 8001d2e:	4b01      	ldr	r3, [pc, #4]	@ (8001d34 <HAL_RCC_OscConfig+0xc6c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e029      	b.n	8001d88 <HAL_RCC_OscConfig+0xcc0>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	4bc3      	ldr	r3, [pc, #780]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d8c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001d90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d94:	6011      	str	r1, [r2, #0]
 8001d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d9a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fa92 f1a2 	rbit	r1, r2
 8001da4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001da8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dac:	6011      	str	r1, [r2, #0]
  return result;
 8001dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fab2 f282 	clz	r2, r2
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f042 0220 	orr.w	r2, r2, #32
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f002 021f 	and.w	r2, r2, #31
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f202 	lsl.w	r2, r1, r2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d185      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd4:	4baf      	ldr	r3, [pc, #700]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	49a7      	ldr	r1, [pc, #668]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e20:	601a      	str	r2, [r3, #0]
  return result;
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e2a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2301      	movs	r3, #1
 8001e40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fdf1 	bl	8000a28 <HAL_GetTick>
 8001e46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe fdec 	bl	8000a28 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e13a      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e72:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001e84:	601a      	str	r2, [r3, #0]
  return result;
 8001e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001e8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d802      	bhi.n	8001ea0 <HAL_RCC_OscConfig+0xdd8>
 8001e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e027      	b.n	8001ef0 <HAL_RCC_OscConfig+0xe28>
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ea8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001ece:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b69      	ldr	r3, [pc, #420]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ef4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001ef8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001efc:	6011      	str	r1, [r2, #0]
 8001efe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f02:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	fa92 f1a2 	rbit	r1, r2
 8001f0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f10:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f14:	6011      	str	r1, [r2, #0]
  return result;
 8001f16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f1a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f042 0220 	orr.w	r2, r2, #32
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f002 021f 	and.w	r2, r2, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d087      	beq.n	8001e4c <HAL_RCC_OscConfig+0xd84>
 8001f3c:	e0ca      	b.n	80020d4 <HAL_RCC_OscConfig+0x100c>
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f62:	601a      	str	r2, [r3, #0]
  return result;
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fd50 	bl	8000a28 <HAL_GetTick>
 8001f88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe fd4b 	bl	8000a28 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e099      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001faa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001fc6:	601a      	str	r2, [r3, #0]
  return result;
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001fd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fda:	d802      	bhi.n	8001fe2 <HAL_RCC_OscConfig+0xf1a>
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	e027      	b.n	8002032 <HAL_RCC_OscConfig+0xf6a>
 8001fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001fea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002002:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002010:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_RCC_OscConfig+0xfcc>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002036:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800203a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800203e:	6011      	str	r1, [r2, #0]
 8002040:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002044:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	fa92 f1a2 	rbit	r1, r2
 800204e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002052:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002056:	6011      	str	r1, [r2, #0]
  return result;
 8002058:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800205c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f002 021f 	and.w	r2, r2, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d187      	bne.n	8001f8e <HAL_RCC_OscConfig+0xec6>
 800207e:	e029      	b.n	80020d4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d103      	bne.n	8002098 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e020      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
 8002094:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_RCC_OscConfig+0x1018>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020bc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b09e      	sub	sp, #120	@ 0x78
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e154      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b89      	ldr	r3, [pc, #548]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b86      	ldr	r3, [pc, #536]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4984      	ldr	r1, [pc, #528]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b82      	ldr	r3, [pc, #520]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e13c      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b7b      	ldr	r3, [pc, #492]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4978      	ldr	r1, [pc, #480]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80cd 	beq.w	80022f2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d137      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xec>
 8002160:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002164:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800216e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b3f      	cmp	r3, #63	@ 0x3f
 8002178:	d802      	bhi.n	8002180 <HAL_RCC_ClockConfig+0x9c>
 800217a:	4b6b      	ldr	r3, [pc, #428]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e00f      	b.n	80021a0 <HAL_RCC_ClockConfig+0xbc>
 8002180:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	667b      	str	r3, [r7, #100]	@ 0x64
 800218e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002192:	663b      	str	r3, [r7, #96]	@ 0x60
 8002194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800219c:	4b62      	ldr	r3, [pc, #392]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80021ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f002 021f 	and.w	r2, r2, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f202 	lsl.w	r2, r1, r2
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d171      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0ea      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d137      	bne.n	8002248 <HAL_RCC_ClockConfig+0x164>
 80021d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80021f0:	d802      	bhi.n	80021f8 <HAL_RCC_ClockConfig+0x114>
 80021f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e00f      	b.n	8002218 <HAL_RCC_ClockConfig+0x134>
 80021f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	647b      	str	r3, [r7, #68]	@ 0x44
 8002206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220a:	643b      	str	r3, [r7, #64]	@ 0x40
 800220c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002214:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800221c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800221e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	f042 0220 	orr.w	r2, r2, #32
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f002 021f 	and.w	r2, r2, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d135      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0ae      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
 8002248:	2302      	movs	r3, #2
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b3f      	cmp	r3, #63	@ 0x3f
 800225e:	d802      	bhi.n	8002266 <HAL_RCC_ClockConfig+0x182>
 8002260:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	e00d      	b.n	8002282 <HAL_RCC_ClockConfig+0x19e>
 8002266:	2302      	movs	r3, #2
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
 8002272:	2302      	movs	r3, #2
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	4b2a      	ldr	r3, [pc, #168]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	2202      	movs	r2, #2
 8002284:	61ba      	str	r2, [r7, #24]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	617a      	str	r2, [r7, #20]
  return result;
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e07a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 0203 	bic.w	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	491a      	ldr	r1, [pc, #104]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fbb1 	bl	8000a28 <HAL_GetTick>
 80022c6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ca:	f7fe fbad 	bl	8000a28 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e062      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 020c 	and.w	r2, r3, #12
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d1eb      	bne.n	80022ca <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d215      	bcs.n	800232c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	4906      	ldr	r1, [pc, #24]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d006      	beq.n	800232c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e041      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2c2>
 8002322:	bf00      	nop
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_RCC_ClockConfig+0x2cc>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	491a      	ldr	r1, [pc, #104]	@ (80023b0 <HAL_RCC_ClockConfig+0x2cc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <HAL_RCC_ClockConfig+0x2cc>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4912      	ldr	r1, [pc, #72]	@ (80023b0 <HAL_RCC_ClockConfig+0x2cc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236a:	f000 f829 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800236e:	4601      	mov	r1, r0
 8002370:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <HAL_RCC_ClockConfig+0x2cc>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002378:	22f0      	movs	r2, #240	@ 0xf0
 800237a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	60fa      	str	r2, [r7, #12]
  return result;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	40d3      	lsrs	r3, r2
 800238e:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x2d0>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	fa21 f303 	lsr.w	r3, r1, r3
 8002396:	4a08      	ldr	r2, [pc, #32]	@ (80023b8 <HAL_RCC_ClockConfig+0x2d4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCC_ClockConfig+0x2d8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fafe 	bl	80009a0 <HAL_InitTick>
  
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3778      	adds	r7, #120	@ 0x78
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080053a8 	.word	0x080053a8
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x94>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ee:	e026      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 80023f2:	613b      	str	r3, [r7, #16]
      break;
 80023f4:	e026      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0c9b      	lsrs	r3, r3, #18
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	4a17      	ldr	r2, [pc, #92]	@ (800245c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x94>)
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800241c:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	fbb2 f2f3 	udiv	r2, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e004      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0c      	ldr	r2, [pc, #48]	@ (8002464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	e002      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 8002440:	613b      	str	r3, [r7, #16]
      break;
 8002442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002444:	693b      	ldr	r3, [r7, #16]
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	007a1200 	.word	0x007a1200
 800245c:	080053c0 	.word	0x080053c0
 8002460:	080053d0 	.word	0x080053d0
 8002464:	003d0900 	.word	0x003d0900

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002486:	f7ff ffef 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 800248a:	4601      	mov	r1, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002494:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	fa92 f2a2 	rbit	r2, r2
 80024a0:	603a      	str	r2, [r7, #0]
  return result;
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	40d3      	lsrs	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	080053b8 	.word	0x080053b8

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024ca:	f7ff ffcd 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024ce:	4601      	mov	r1, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80024d8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80024dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	fa92 f2a2 	rbit	r2, r2
 80024e4:	603a      	str	r2, [r7, #0]
  return result;
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	40d3      	lsrs	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	080053b8 	.word	0x080053b8

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b092      	sub	sp, #72	@ 0x48
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80d2 	beq.w	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252c:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10e      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4a49      	ldr	r2, [pc, #292]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002542:	61d3      	str	r3, [r2, #28]
 8002544:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a40      	ldr	r2, [pc, #256]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe fa5b 	bl	8000a28 <HAL_GetTick>
 8002572:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe fa57 	bl	8000a28 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	@ 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e167      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002594:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800259c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800259e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8082 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d07a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	461a      	mov	r2, r3
 80025de:	2301      	movs	r3, #1
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002606:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800260a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800260c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d049      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe fa07 	bl	8000a28 <HAL_GetTick>
 800261a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fa03 	bl	8000a28 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e111      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002634:	2302      	movs	r3, #2
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	61fb      	str	r3, [r7, #28]
  return result;
 800264c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800265e:	4b01      	ldr	r3, [pc, #4]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	e00d      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	10908100 	.word	0x10908100
 8002670:	2302      	movs	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	4b78      	ldr	r3, [pc, #480]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2202      	movs	r2, #2
 8002682:	613a      	str	r2, [r7, #16]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	fa92 f2a2 	rbit	r2, r2
 800268a:	60fa      	str	r2, [r7, #12]
  return result;
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0b9      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	496a      	ldr	r1, [pc, #424]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026dc:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	f023 0203 	bic.w	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	495d      	ldr	r1, [pc, #372]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026fa:	4b59      	ldr	r3, [pc, #356]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4956      	ldr	r1, [pc, #344]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002708:	4313      	orrs	r3, r2
 800270a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002718:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	494e      	ldr	r1, [pc, #312]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002726:	4313      	orrs	r3, r2
 8002728:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f023 0210 	bic.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4947      	ldr	r1, [pc, #284]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002744:	4313      	orrs	r3, r2
 8002746:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002754:	4b42      	ldr	r3, [pc, #264]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	493f      	ldr	r1, [pc, #252]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002772:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f023 0220 	bic.w	r2, r3, #32
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4938      	ldr	r1, [pc, #224]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002780:	4313      	orrs	r3, r2
 8002782:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002790:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	4930      	ldr	r1, [pc, #192]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	4929      	ldr	r1, [pc, #164]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	4921      	ldr	r1, [pc, #132]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	491a      	ldr	r1, [pc, #104]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002808:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	4912      	ldr	r1, [pc, #72]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002816:	4313      	orrs	r3, r2
 8002818:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002826:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	490b      	ldr	r1, [pc, #44]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002834:	4313      	orrs	r3, r2
 8002836:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	4903      	ldr	r1, [pc, #12]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002852:	4313      	orrs	r3, r2
 8002854:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3748      	adds	r7, #72	@ 0x48
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e049      	b.n	800290a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fd fed6 	bl	800063c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 fa4a 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_TIM_PWM_Start+0x24>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e03c      	b.n	80029b2 <HAL_TIM_PWM_Start+0x9e>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d109      	bne.n	8002952 <HAL_TIM_PWM_Start+0x3e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e02f      	b.n	80029b2 <HAL_TIM_PWM_Start+0x9e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d109      	bne.n	800296c <HAL_TIM_PWM_Start+0x58>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e022      	b.n	80029b2 <HAL_TIM_PWM_Start+0x9e>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d109      	bne.n	8002986 <HAL_TIM_PWM_Start+0x72>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e015      	b.n	80029b2 <HAL_TIM_PWM_Start+0x9e>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b10      	cmp	r3, #16
 800298a:	d109      	bne.n	80029a0 <HAL_TIM_PWM_Start+0x8c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e008      	b.n	80029b2 <HAL_TIM_PWM_Start+0x9e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e097      	b.n	8002aea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <HAL_TIM_PWM_Start+0xb6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c8:	e023      	b.n	8002a12 <HAL_TIM_PWM_Start+0xfe>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d104      	bne.n	80029da <HAL_TIM_PWM_Start+0xc6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d8:	e01b      	b.n	8002a12 <HAL_TIM_PWM_Start+0xfe>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Start+0xd6>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e8:	e013      	b.n	8002a12 <HAL_TIM_PWM_Start+0xfe>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start+0xe6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029f8:	e00b      	b.n	8002a12 <HAL_TIM_PWM_Start+0xfe>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_PWM_Start+0xf6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a08:	e003      	b.n	8002a12 <HAL_TIM_PWM_Start+0xfe>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	6839      	ldr	r1, [r7, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fd00 	bl	8003420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a33      	ldr	r2, [pc, #204]	@ (8002af4 <HAL_TIM_PWM_Start+0x1e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x13e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a32      	ldr	r2, [pc, #200]	@ (8002af8 <HAL_TIM_PWM_Start+0x1e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x13e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a30      	ldr	r2, [pc, #192]	@ (8002afc <HAL_TIM_PWM_Start+0x1e8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x13e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2f      	ldr	r2, [pc, #188]	@ (8002b00 <HAL_TIM_PWM_Start+0x1ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x13e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b04 <HAL_TIM_PWM_Start+0x1f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x142>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_TIM_PWM_Start+0x144>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a20      	ldr	r2, [pc, #128]	@ (8002af4 <HAL_TIM_PWM_Start+0x1e0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x194>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7e:	d013      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x194>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a20      	ldr	r2, [pc, #128]	@ (8002b08 <HAL_TIM_PWM_Start+0x1f4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x194>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <HAL_TIM_PWM_Start+0x1f8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x194>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a17      	ldr	r2, [pc, #92]	@ (8002af8 <HAL_TIM_PWM_Start+0x1e4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x194>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	@ (8002afc <HAL_TIM_PWM_Start+0x1e8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d115      	bne.n	8002ad4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <HAL_TIM_PWM_Start+0x1fc>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d015      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0x1d2>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac0:	d011      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	e008      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e000      	b.n	8002ae8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40013400 	.word	0x40013400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40014400 	.word	0x40014400
 8002b04:	40014800 	.word	0x40014800
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	00010007 	.word	0x00010007

08002b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e0ff      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b14      	cmp	r3, #20
 8002b3e:	f200 80f0 	bhi.w	8002d22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b42:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b9d 	.word	0x08002b9d
 8002b4c:	08002d23 	.word	0x08002d23
 8002b50:	08002d23 	.word	0x08002d23
 8002b54:	08002d23 	.word	0x08002d23
 8002b58:	08002bdd 	.word	0x08002bdd
 8002b5c:	08002d23 	.word	0x08002d23
 8002b60:	08002d23 	.word	0x08002d23
 8002b64:	08002d23 	.word	0x08002d23
 8002b68:	08002c1f 	.word	0x08002c1f
 8002b6c:	08002d23 	.word	0x08002d23
 8002b70:	08002d23 	.word	0x08002d23
 8002b74:	08002d23 	.word	0x08002d23
 8002b78:	08002c5f 	.word	0x08002c5f
 8002b7c:	08002d23 	.word	0x08002d23
 8002b80:	08002d23 	.word	0x08002d23
 8002b84:	08002d23 	.word	0x08002d23
 8002b88:	08002ca1 	.word	0x08002ca1
 8002b8c:	08002d23 	.word	0x08002d23
 8002b90:	08002d23 	.word	0x08002d23
 8002b94:	08002d23 	.word	0x08002d23
 8002b98:	08002ce1 	.word	0x08002ce1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f966 	bl	8002e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0204 	bic.w	r2, r2, #4
 8002bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6999      	ldr	r1, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	619a      	str	r2, [r3, #24]
      break;
 8002bda:	e0a5      	b.n	8002d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f9d6 	bl	8002f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6999      	ldr	r1, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	619a      	str	r2, [r3, #24]
      break;
 8002c1c:	e084      	b.n	8002d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fa3f 	bl	80030a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0208 	orr.w	r2, r2, #8
 8002c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0204 	bic.w	r2, r2, #4
 8002c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69d9      	ldr	r1, [r3, #28]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	61da      	str	r2, [r3, #28]
      break;
 8002c5c:	e064      	b.n	8002d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 faa7 	bl	80031b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	61da      	str	r2, [r3, #28]
      break;
 8002c9e:	e043      	b.n	8002d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 faf0 	bl	800328c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0208 	orr.w	r2, r2, #8
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0204 	bic.w	r2, r2, #4
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cde:	e023      	b.n	8002d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fb34 	bl	8003354 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	021a      	lsls	r2, r3, #8
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d20:	e002      	b.n	8002d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
      break;
 8002d26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop

08002d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a42      	ldr	r2, [pc, #264]	@ (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00f      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5a:	d00b      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e5c <TIM_Base_SetConfig+0x120>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3e      	ldr	r2, [pc, #248]	@ (8002e60 <TIM_Base_SetConfig+0x124>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e64 <TIM_Base_SetConfig+0x128>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d108      	bne.n	8002d86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a33      	ldr	r2, [pc, #204]	@ (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d94:	d017      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a30      	ldr	r2, [pc, #192]	@ (8002e5c <TIM_Base_SetConfig+0x120>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2f      	ldr	r2, [pc, #188]	@ (8002e60 <TIM_Base_SetConfig+0x124>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e64 <TIM_Base_SetConfig+0x128>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e68 <TIM_Base_SetConfig+0x12c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2c      	ldr	r2, [pc, #176]	@ (8002e6c <TIM_Base_SetConfig+0x130>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e70 <TIM_Base_SetConfig+0x134>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a16      	ldr	r2, [pc, #88]	@ (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00f      	beq.n	8002e24 <TIM_Base_SetConfig+0xe8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <TIM_Base_SetConfig+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_Base_SetConfig+0xe8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <TIM_Base_SetConfig+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <TIM_Base_SetConfig+0xe8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0xe8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a14      	ldr	r2, [pc, #80]	@ (8002e70 <TIM_Base_SetConfig+0x134>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f023 0201 	bic.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40013400 	.word	0x40013400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800

08002e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f023 0201 	bic.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 0302 	bic.w	r3, r3, #2
 8002ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a2c      	ldr	r2, [pc, #176]	@ (8002f80 <TIM_OC1_SetConfig+0x10c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00f      	beq.n	8002ef4 <TIM_OC1_SetConfig+0x80>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <TIM_OC1_SetConfig+0x110>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_OC1_SetConfig+0x80>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <TIM_OC1_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_OC1_SetConfig+0x80>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a29      	ldr	r2, [pc, #164]	@ (8002f8c <TIM_OC1_SetConfig+0x118>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_OC1_SetConfig+0x80>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <TIM_OC1_SetConfig+0x11c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10c      	bne.n	8002f0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0308 	bic.w	r3, r3, #8
 8002efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <TIM_OC1_SetConfig+0x10c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00f      	beq.n	8002f36 <TIM_OC1_SetConfig+0xc2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	@ (8002f84 <TIM_OC1_SetConfig+0x110>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <TIM_OC1_SetConfig+0xc2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <TIM_OC1_SetConfig+0x114>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <TIM_OC1_SetConfig+0xc2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a18      	ldr	r2, [pc, #96]	@ (8002f8c <TIM_OC1_SetConfig+0x118>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <TIM_OC1_SetConfig+0xc2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a17      	ldr	r2, [pc, #92]	@ (8002f90 <TIM_OC1_SetConfig+0x11c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d111      	bne.n	8002f5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	621a      	str	r2, [r3, #32]
}
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40013400 	.word	0x40013400
 8002f88:	40014000 	.word	0x40014000
 8002f8c:	40014400 	.word	0x40014400
 8002f90:	40014800 	.word	0x40014800

08002f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f023 0210 	bic.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0320 	bic.w	r3, r3, #32
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <TIM_OC2_SetConfig+0x100>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC2_SetConfig+0x6c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a27      	ldr	r2, [pc, #156]	@ (8003098 <TIM_OC2_SetConfig+0x104>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <TIM_OC2_SetConfig+0x100>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00f      	beq.n	8003044 <TIM_OC2_SetConfig+0xb0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <TIM_OC2_SetConfig+0x104>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00b      	beq.n	8003044 <TIM_OC2_SetConfig+0xb0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1b      	ldr	r2, [pc, #108]	@ (800309c <TIM_OC2_SetConfig+0x108>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d007      	beq.n	8003044 <TIM_OC2_SetConfig+0xb0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1a      	ldr	r2, [pc, #104]	@ (80030a0 <TIM_OC2_SetConfig+0x10c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_OC2_SetConfig+0xb0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a19      	ldr	r2, [pc, #100]	@ (80030a4 <TIM_OC2_SetConfig+0x110>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d113      	bne.n	800306c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800304a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003052:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40013400 	.word	0x40013400
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800

080030a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a27      	ldr	r2, [pc, #156]	@ (80031a4 <TIM_OC3_SetConfig+0xfc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_OC3_SetConfig+0x6a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <TIM_OC3_SetConfig+0x100>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10d      	bne.n	800312e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800312c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <TIM_OC3_SetConfig+0xfc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00f      	beq.n	8003156 <TIM_OC3_SetConfig+0xae>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <TIM_OC3_SetConfig+0x100>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_OC3_SetConfig+0xae>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <TIM_OC3_SetConfig+0x104>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <TIM_OC3_SetConfig+0xae>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <TIM_OC3_SetConfig+0x108>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_OC3_SetConfig+0xae>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <TIM_OC3_SetConfig+0x10c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d113      	bne.n	800317e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800315c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40013400 	.word	0x40013400
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40014400 	.word	0x40014400
 80031b4:	40014800 	.word	0x40014800

080031b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	031b      	lsls	r3, r3, #12
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <TIM_OC4_SetConfig+0xc0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00f      	beq.n	800323c <TIM_OC4_SetConfig+0x84>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a17      	ldr	r2, [pc, #92]	@ (800327c <TIM_OC4_SetConfig+0xc4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_OC4_SetConfig+0x84>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <TIM_OC4_SetConfig+0xc8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <TIM_OC4_SetConfig+0x84>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <TIM_OC4_SetConfig+0xcc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC4_SetConfig+0x84>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <TIM_OC4_SetConfig+0xd0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d109      	bne.n	8003250 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40013400 	.word	0x40013400
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800

0800328c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80032d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <TIM_OC5_SetConfig+0xb4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00f      	beq.n	8003306 <TIM_OC5_SetConfig+0x7a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a16      	ldr	r2, [pc, #88]	@ (8003344 <TIM_OC5_SetConfig+0xb8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_OC5_SetConfig+0x7a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a15      	ldr	r2, [pc, #84]	@ (8003348 <TIM_OC5_SetConfig+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_OC5_SetConfig+0x7a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a14      	ldr	r2, [pc, #80]	@ (800334c <TIM_OC5_SetConfig+0xc0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_OC5_SetConfig+0x7a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a13      	ldr	r2, [pc, #76]	@ (8003350 <TIM_OC5_SetConfig+0xc4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d109      	bne.n	800331a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40013400 	.word	0x40013400
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800

08003354 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800339a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	051b      	lsls	r3, r3, #20
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a18      	ldr	r2, [pc, #96]	@ (800340c <TIM_OC6_SetConfig+0xb8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00f      	beq.n	80033d0 <TIM_OC6_SetConfig+0x7c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <TIM_OC6_SetConfig+0xbc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <TIM_OC6_SetConfig+0x7c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <TIM_OC6_SetConfig+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <TIM_OC6_SetConfig+0x7c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <TIM_OC6_SetConfig+0xc4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_OC6_SetConfig+0x7c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a14      	ldr	r2, [pc, #80]	@ (800341c <TIM_OC6_SetConfig+0xc8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d109      	bne.n	80033e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40013400 	.word	0x40013400
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2201      	movs	r2, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	431a      	orrs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e040      	b.n	80034fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fd f927 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2224      	movs	r2, #36	@ 0x24
 8003496:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fdcf 	bl	8004054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fbf8 	bl	8003cac <UART_SetConfig>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e01b      	b.n	80034fe <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fe4e 	bl	8004198 <UART_CheckIdleState>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	@ 0x28
 800350a:	af02      	add	r7, sp, #8
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351a:	2b20      	cmp	r3, #32
 800351c:	d177      	bne.n	800360e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_UART_Transmit+0x24>
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e070      	b.n	8003610 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2221      	movs	r2, #33	@ 0x21
 800353a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353c:	f7fd fa74 	bl	8000a28 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355a:	d108      	bne.n	800356e <HAL_UART_Transmit+0x68>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e003      	b.n	8003576 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003576:	e02f      	b.n	80035d8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2200      	movs	r2, #0
 8003580:	2180      	movs	r1, #128	@ 0x80
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 feb0 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e03b      	b.n	8003610 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035aa:	b292      	uxth	r2, r2
 80035ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	3302      	adds	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e007      	b.n	80035c6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1c9      	bne.n	8003578 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2140      	movs	r1, #64	@ 0x40
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fe7a 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e005      	b.n	8003610 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800362c:	2b20      	cmp	r3, #32
 800362e:	d132      	bne.n	8003696 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_UART_Receive_IT+0x24>
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e02b      	b.n	8003698 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d018      	beq.n	8003686 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	613b      	str	r3, [r7, #16]
   return(result);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e6      	bne.n	8003654 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	461a      	mov	r2, r3
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fe99 	bl	80043c4 <UART_Start_Receive_IT>
 8003692:	4603      	mov	r3, r0
 8003694:	e000      	b.n	8003698 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	@ 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b0ba      	sub	sp, #232	@ 0xe8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036ce:	4013      	ands	r3, r2
 80036d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d115      	bne.n	8003708 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00f      	beq.n	8003708 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 82ab 	beq.w	8003c54 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
      }
      return;
 8003706:	e2a5      	b.n	8003c54 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8117 	beq.w	8003940 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800371e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003722:	4b85      	ldr	r3, [pc, #532]	@ (8003938 <HAL_UART_IRQHandler+0x298>)
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 810a 	beq.w	8003940 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d011      	beq.n	800375c <HAL_UART_IRQHandler+0xbc>
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2201      	movs	r2, #1
 800374a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800375c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d011      	beq.n	800378c <HAL_UART_IRQHandler+0xec>
 8003768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2202      	movs	r2, #2
 800377a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d011      	beq.n	80037bc <HAL_UART_IRQHandler+0x11c>
 8003798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2204      	movs	r2, #4
 80037aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b2:	f043 0202 	orr.w	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d017      	beq.n	80037f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ee:	f043 0208 	orr.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003800:	2b00      	cmp	r3, #0
 8003802:	d012      	beq.n	800382a <HAL_UART_IRQHandler+0x18a>
 8003804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00c      	beq.n	800382a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8211 	beq.w	8003c58 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003872:	2b40      	cmp	r3, #64	@ 0x40
 8003874:	d005      	beq.n	8003882 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800387a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800387e:	2b00      	cmp	r3, #0
 8003880:	d04f      	beq.n	8003922 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fe52 	bl	800452c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003892:	2b40      	cmp	r3, #64	@ 0x40
 8003894:	d141      	bne.n	800391a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3308      	adds	r3, #8
 800389c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3308      	adds	r3, #8
 80038be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1d9      	bne.n	8003896 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d013      	beq.n	8003912 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ee:	4a13      	ldr	r2, [pc, #76]	@ (800393c <HAL_UART_IRQHandler+0x29c>)
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fa15 	bl	8000d26 <HAL_DMA_Abort_IT>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d017      	beq.n	8003932 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800390c:	4610      	mov	r0, r2
 800390e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	e00f      	b.n	8003932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9b4 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	e00b      	b.n	8003932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9b0 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e007      	b.n	8003932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9ac 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003930:	e192      	b.n	8003c58 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003932:	bf00      	nop
    return;
 8003934:	e190      	b.n	8003c58 <HAL_UART_IRQHandler+0x5b8>
 8003936:	bf00      	nop
 8003938:	04000120 	.word	0x04000120
 800393c:	080045f5 	.word	0x080045f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 814b 	bne.w	8003be0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8144 	beq.w	8003be0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 813d 	beq.w	8003be0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003978:	2b40      	cmp	r3, #64	@ 0x40
 800397a:	f040 80b5 	bne.w	8003ae8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800398a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8164 	beq.w	8003c5c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800399a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800399e:	429a      	cmp	r2, r3
 80039a0:	f080 815c 	bcs.w	8003c5c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	f000 8086 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039e8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1da      	bne.n	80039ba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a28:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e1      	bne.n	8003a04 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a64:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e3      	bne.n	8003a40 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a96:	f023 0310 	bic.w	r3, r3, #16
 8003a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003aaa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e4      	bne.n	8003a86 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f8f2 	bl	8000caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8d7 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ae6:	e0b9      	b.n	8003c5c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80ab 	beq.w	8003c60 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a6 	beq.w	8003c60 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e4      	bne.n	8003b14 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	623b      	str	r3, [r7, #32]
   return(result);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e3      	bne.n	8003b4a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0310 	bic.w	r3, r3, #16
 8003baa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e4      	bne.n	8003b96 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f85b 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bde:	e03f      	b.n	8003c60 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <HAL_UART_IRQHandler+0x56a>
 8003bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fede 	bl	80049c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c08:	e02d      	b.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00e      	beq.n	8003c34 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01c      	beq.n	8003c64 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
    }
    return;
 8003c32:	e017      	b.n	8003c64 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d012      	beq.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
 8003c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fce7 	bl	8004620 <UART_EndTransmit_IT>
    return;
 8003c52:	e008      	b.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c54:	bf00      	nop
 8003c56:	e006      	b.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c58:	bf00      	nop
 8003c5a:	e004      	b.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c5c:	bf00      	nop
 8003c5e:	e002      	b.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c64:	bf00      	nop
  }

}
 8003c66:	37e8      	adds	r7, #232	@ 0xe8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003cda:	f023 030c 	bic.w	r3, r3, #12
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	6979      	ldr	r1, [r7, #20]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4aa7      	ldr	r2, [pc, #668]	@ (8003fc4 <UART_SetConfig+0x318>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d120      	bne.n	8003d6e <UART_SetConfig+0xc2>
 8003d2c:	4ba6      	ldr	r3, [pc, #664]	@ (8003fc8 <UART_SetConfig+0x31c>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d817      	bhi.n	8003d68 <UART_SetConfig+0xbc>
 8003d38:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <UART_SetConfig+0x94>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d5d 	.word	0x08003d5d
 8003d48:	08003d63 	.word	0x08003d63
 8003d4c:	08003d57 	.word	0x08003d57
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e0b5      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e0b2      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e0af      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003d62:	2308      	movs	r3, #8
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e0ac      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e0a9      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a96      	ldr	r2, [pc, #600]	@ (8003fcc <UART_SetConfig+0x320>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d124      	bne.n	8003dc2 <UART_SetConfig+0x116>
 8003d78:	4b93      	ldr	r3, [pc, #588]	@ (8003fc8 <UART_SetConfig+0x31c>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d84:	d011      	beq.n	8003daa <UART_SetConfig+0xfe>
 8003d86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d8a:	d817      	bhi.n	8003dbc <UART_SetConfig+0x110>
 8003d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d90:	d011      	beq.n	8003db6 <UART_SetConfig+0x10a>
 8003d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d96:	d811      	bhi.n	8003dbc <UART_SetConfig+0x110>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <UART_SetConfig+0xf8>
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da0:	d006      	beq.n	8003db0 <UART_SetConfig+0x104>
 8003da2:	e00b      	b.n	8003dbc <UART_SetConfig+0x110>
 8003da4:	2300      	movs	r3, #0
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e08b      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003daa:	2302      	movs	r3, #2
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e088      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003db0:	2304      	movs	r3, #4
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e085      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003db6:	2308      	movs	r3, #8
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e082      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e07f      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a82      	ldr	r2, [pc, #520]	@ (8003fd0 <UART_SetConfig+0x324>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d124      	bne.n	8003e16 <UART_SetConfig+0x16a>
 8003dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc8 <UART_SetConfig+0x31c>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003dd4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dd8:	d011      	beq.n	8003dfe <UART_SetConfig+0x152>
 8003dda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dde:	d817      	bhi.n	8003e10 <UART_SetConfig+0x164>
 8003de0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003de4:	d011      	beq.n	8003e0a <UART_SetConfig+0x15e>
 8003de6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dea:	d811      	bhi.n	8003e10 <UART_SetConfig+0x164>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <UART_SetConfig+0x14c>
 8003df0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003df4:	d006      	beq.n	8003e04 <UART_SetConfig+0x158>
 8003df6:	e00b      	b.n	8003e10 <UART_SetConfig+0x164>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e061      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e05e      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e04:	2304      	movs	r3, #4
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e05b      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e058      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e10:	2310      	movs	r3, #16
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e055      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd4 <UART_SetConfig+0x328>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d124      	bne.n	8003e6a <UART_SetConfig+0x1be>
 8003e20:	4b69      	ldr	r3, [pc, #420]	@ (8003fc8 <UART_SetConfig+0x31c>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e2c:	d011      	beq.n	8003e52 <UART_SetConfig+0x1a6>
 8003e2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e32:	d817      	bhi.n	8003e64 <UART_SetConfig+0x1b8>
 8003e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x1b2>
 8003e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e3e:	d811      	bhi.n	8003e64 <UART_SetConfig+0x1b8>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0x1a0>
 8003e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e48:	d006      	beq.n	8003e58 <UART_SetConfig+0x1ac>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x1b8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e037      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e034      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e031      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e02e      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e02b      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd8 <UART_SetConfig+0x32c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d124      	bne.n	8003ebe <UART_SetConfig+0x212>
 8003e74:	4b54      	ldr	r3, [pc, #336]	@ (8003fc8 <UART_SetConfig+0x31c>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e80:	d011      	beq.n	8003ea6 <UART_SetConfig+0x1fa>
 8003e82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e86:	d817      	bhi.n	8003eb8 <UART_SetConfig+0x20c>
 8003e88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e8c:	d011      	beq.n	8003eb2 <UART_SetConfig+0x206>
 8003e8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e92:	d811      	bhi.n	8003eb8 <UART_SetConfig+0x20c>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <UART_SetConfig+0x1f4>
 8003e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e9c:	d006      	beq.n	8003eac <UART_SetConfig+0x200>
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x20c>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e00d      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e00a      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e007      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e004      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e001      	b.n	8003ec2 <UART_SetConfig+0x216>
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eca:	d15b      	bne.n	8003f84 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d827      	bhi.n	8003f22 <UART_SetConfig+0x276>
 8003ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <UART_SetConfig+0x22c>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fac0 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003f00:	61b8      	str	r0, [r7, #24]
        break;
 8003f02:	e013      	b.n	8003f2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fade 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003f08:	61b8      	str	r0, [r7, #24]
        break;
 8003f0a:	e00f      	b.n	8003f2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b33      	ldr	r3, [pc, #204]	@ (8003fdc <UART_SetConfig+0x330>)
 8003f0e:	61bb      	str	r3, [r7, #24]
        break;
 8003f10:	e00c      	b.n	8003f2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fa55 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003f16:	61b8      	str	r0, [r7, #24]
        break;
 8003f18:	e008      	b.n	8003f2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e004      	b.n	8003f2c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77bb      	strb	r3, [r7, #30]
        break;
 8003f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8082 	beq.w	8004038 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	005a      	lsls	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	441a      	add	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d916      	bls.n	8003f7e <UART_SetConfig+0x2d2>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f56:	d212      	bcs.n	8003f7e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	89fb      	ldrh	r3, [r7, #14]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	89fa      	ldrh	r2, [r7, #14]
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e05c      	b.n	8004038 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77bb      	strb	r3, [r7, #30]
 8003f82:	e059      	b.n	8004038 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d835      	bhi.n	8003ff6 <UART_SetConfig+0x34a>
 8003f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <UART_SetConfig+0x2e4>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003ff7 	.word	0x08003ff7
 8003fa0:	08003fe7 	.word	0x08003fe7
 8003fa4:	08003ff7 	.word	0x08003ff7
 8003fa8:	08003ff7 	.word	0x08003ff7
 8003fac:	08003ff7 	.word	0x08003ff7
 8003fb0:	08003fef 	.word	0x08003fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7fe fa64 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	61b8      	str	r0, [r7, #24]
        break;
 8003fba:	e021      	b.n	8004000 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7fe fa82 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e01d      	b.n	8004000 <UART_SetConfig+0x354>
 8003fc4:	40013800 	.word	0x40013800
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	40004800 	.word	0x40004800
 8003fd4:	40004c00 	.word	0x40004c00
 8003fd8:	40005000 	.word	0x40005000
 8003fdc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <UART_SetConfig+0x3a4>)
 8003fe2:	61bb      	str	r3, [r7, #24]
        break;
 8003fe4:	e00c      	b.n	8004000 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe f9eb 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003fea:	61b8      	str	r0, [r7, #24]
        break;
 8003fec:	e008      	b.n	8004000 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff2:	61bb      	str	r3, [r7, #24]
        break;
 8003ff4:	e004      	b.n	8004000 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d018      	beq.n	8004038 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	085a      	lsrs	r2, r3, #1
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	441a      	add	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d909      	bls.n	8004034 <UART_SetConfig+0x388>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004026:	d205      	bcs.n	8004034 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	e001      	b.n	8004038 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004044:	7fbb      	ldrb	r3, [r7, #30]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	007a1200 	.word	0x007a1200

08004054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01a      	beq.n	800416a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004152:	d10a      	bne.n	800416a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b098      	sub	sp, #96	@ 0x60
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a8:	f7fc fc3e 	bl	8000a28 <HAL_GetTick>
 80041ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d12e      	bne.n	800421a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f88c 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d021      	beq.n	800421a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e6      	bne.n	80041d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e062      	b.n	80042e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d149      	bne.n	80042bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004230:	2200      	movs	r2, #0
 8004232:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f856 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03c      	beq.n	80042bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	623b      	str	r3, [r7, #32]
   return(result);
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
 8004262:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	60fb      	str	r3, [r7, #12]
   return(result);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004294:	61fa      	str	r2, [r7, #28]
 8004296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	617b      	str	r3, [r7, #20]
   return(result);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e011      	b.n	80042e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3758      	adds	r7, #88	@ 0x58
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	e04f      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004300:	d04b      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fc fb91 	bl	8000a28 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e04e      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d037      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b80      	cmp	r3, #128	@ 0x80
 800432e:	d034      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d031      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b08      	cmp	r3, #8
 8004342:	d110      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2208      	movs	r2, #8
 800434a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f8ed 	bl	800452c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2208      	movs	r2, #8
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e029      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004374:	d111      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800437e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8d3 	bl	800452c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e00f      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d0a0      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b097      	sub	sp, #92	@ 0x5c
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f6:	d10e      	bne.n	8004416 <UART_Start_Receive_IT+0x52>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <UART_Start_Receive_IT+0x48>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004406:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800440a:	e01a      	b.n	8004442 <UART_Start_Receive_IT+0x7e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	22ff      	movs	r2, #255	@ 0xff
 8004410:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004414:	e015      	b.n	8004442 <UART_Start_Receive_IT+0x7e>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <UART_Start_Receive_IT+0x76>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d104      	bne.n	8004430 <UART_Start_Receive_IT+0x6c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22ff      	movs	r2, #255	@ 0xff
 800442a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800442e:	e008      	b.n	8004442 <UART_Start_Receive_IT+0x7e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	227f      	movs	r2, #127	@ 0x7f
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004438:	e003      	b.n	8004442 <UART_Start_Receive_IT+0x7e>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2222      	movs	r2, #34	@ 0x22
 800444e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	657b      	str	r3, [r7, #84]	@ 0x54
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004472:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004474:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e5      	bne.n	8004452 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448e:	d107      	bne.n	80044a0 <UART_Start_Receive_IT+0xdc>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a22      	ldr	r2, [pc, #136]	@ (8004524 <UART_Start_Receive_IT+0x160>)
 800449c:	669a      	str	r2, [r3, #104]	@ 0x68
 800449e:	e002      	b.n	80044a6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <UART_Start_Receive_IT+0x164>)
 80044a4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80044c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e6      	bne.n	80044ae <UART_Start_Receive_IT+0xea>
 80044e0:	e018      	b.n	8004514 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	613b      	str	r3, [r7, #16]
   return(result);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f043 0320 	orr.w	r3, r3, #32
 80044f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	69f9      	ldr	r1, [r7, #28]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	61bb      	str	r3, [r7, #24]
   return(result);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e6      	bne.n	80044e2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	375c      	adds	r7, #92	@ 0x5c
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	0800481d 	.word	0x0800481d
 8004528:	08004675 	.word	0x08004675

0800452c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b095      	sub	sp, #84	@ 0x54
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004552:	643b      	str	r3, [r7, #64]	@ 0x40
 8004554:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e6      	bne.n	8004534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3308      	adds	r3, #8
 800456c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	61fb      	str	r3, [r7, #28]
   return(result);
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3308      	adds	r3, #8
 8004584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e5      	bne.n	8004566 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d118      	bne.n	80045d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	613b      	str	r3, [r7, #16]
   return(result);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e6      	bne.n	80045a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045e8:	bf00      	nop
 80045ea:	3754      	adds	r7, #84	@ 0x54
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fb34 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	60bb      	str	r3, [r7, #8]
   return(result);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	613b      	str	r3, [r7, #16]
   return(result);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e6      	bne.n	8004628 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fb00 	bl	8003c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466c:	bf00      	nop
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b09c      	sub	sp, #112	@ 0x70
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004682:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800468c:	2b22      	cmp	r3, #34	@ 0x22
 800468e:	f040 80b9 	bne.w	8004804 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004698:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800469c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046a0:	b2d9      	uxtb	r1, r3
 80046a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	400a      	ands	r2, r1
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 809c 	bne.w	8004814 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004700:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e6      	bne.n	80046dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800471e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	667b      	str	r3, [r7, #100]	@ 0x64
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800472e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004730:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800473c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d018      	beq.n	8004796 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	623b      	str	r3, [r7, #32]
   return(result);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004778:	663b      	str	r3, [r7, #96]	@ 0x60
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004782:	633b      	str	r3, [r7, #48]	@ 0x30
 8004784:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e6      	bne.n	8004764 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479a:	2b01      	cmp	r3, #1
 800479c:	d12e      	bne.n	80047fc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	617b      	str	r3, [r7, #20]
   return(result);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d103      	bne.n	80047ec <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2210      	movs	r2, #16
 80047ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fa4d 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047fa:	e00b      	b.n	8004814 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fb fced 	bl	80001dc <HAL_UART_RxCpltCallback>
}
 8004802:	e007      	b.n	8004814 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0208 	orr.w	r2, r2, #8
 8004812:	619a      	str	r2, [r3, #24]
}
 8004814:	bf00      	nop
 8004816:	3770      	adds	r7, #112	@ 0x70
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b09c      	sub	sp, #112	@ 0x70
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800482a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004834:	2b22      	cmp	r3, #34	@ 0x22
 8004836:	f040 80b9 	bne.w	80049ac <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004840:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004848:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800484a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800484e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004852:	4013      	ands	r3, r2
 8004854:	b29a      	uxth	r2, r3
 8004856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004858:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 809c 	bne.w	80049bc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004898:	667b      	str	r3, [r7, #100]	@ 0x64
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80048b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80048d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d018      	beq.n	800493e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	61fb      	str	r3, [r7, #28]
   return(result);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800492a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800492c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e6      	bne.n	800490c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	2b01      	cmp	r3, #1
 8004944:	d12e      	bne.n	80049a4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	60bb      	str	r3, [r7, #8]
   return(result);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	613b      	str	r3, [r7, #16]
   return(result);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d103      	bne.n	8004994 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2210      	movs	r2, #16
 8004992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff f979 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049a2:	e00b      	b.n	80049bc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fb fc19 	bl	80001dc <HAL_UART_RxCpltCallback>
}
 80049aa:	e007      	b.n	80049bc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0208 	orr.w	r2, r2, #8
 80049ba:	619a      	str	r2, [r3, #24]
}
 80049bc:	bf00      	nop
 80049be:	3770      	adds	r7, #112	@ 0x70
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <std>:
 80049d8:	2300      	movs	r3, #0
 80049da:	b510      	push	{r4, lr}
 80049dc:	4604      	mov	r4, r0
 80049de:	e9c0 3300 	strd	r3, r3, [r0]
 80049e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049e6:	6083      	str	r3, [r0, #8]
 80049e8:	8181      	strh	r1, [r0, #12]
 80049ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80049ec:	81c2      	strh	r2, [r0, #14]
 80049ee:	6183      	str	r3, [r0, #24]
 80049f0:	4619      	mov	r1, r3
 80049f2:	2208      	movs	r2, #8
 80049f4:	305c      	adds	r0, #92	@ 0x5c
 80049f6:	f000 f90f 	bl	8004c18 <memset>
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <std+0x58>)
 80049fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80049fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <std+0x5c>)
 8004a00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <std+0x60>)
 8004a04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <std+0x64>)
 8004a08:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <std+0x68>)
 8004a0c:	6224      	str	r4, [r4, #32]
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d006      	beq.n	8004a20 <std+0x48>
 8004a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a16:	4294      	cmp	r4, r2
 8004a18:	d002      	beq.n	8004a20 <std+0x48>
 8004a1a:	33d0      	adds	r3, #208	@ 0xd0
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	d105      	bne.n	8004a2c <std+0x54>
 8004a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a28:	f000 b928 	b.w	8004c7c <__retarget_lock_init_recursive>
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	bf00      	nop
 8004a30:	08004f39 	.word	0x08004f39
 8004a34:	08004f5b 	.word	0x08004f5b
 8004a38:	08004f93 	.word	0x08004f93
 8004a3c:	08004fb7 	.word	0x08004fb7
 8004a40:	20000170 	.word	0x20000170

08004a44 <stdio_exit_handler>:
 8004a44:	4a02      	ldr	r2, [pc, #8]	@ (8004a50 <stdio_exit_handler+0xc>)
 8004a46:	4903      	ldr	r1, [pc, #12]	@ (8004a54 <stdio_exit_handler+0x10>)
 8004a48:	4803      	ldr	r0, [pc, #12]	@ (8004a58 <stdio_exit_handler+0x14>)
 8004a4a:	f000 b869 	b.w	8004b20 <_fwalk_sglue>
 8004a4e:	bf00      	nop
 8004a50:	2000000c 	.word	0x2000000c
 8004a54:	08004ed1 	.word	0x08004ed1
 8004a58:	2000001c 	.word	0x2000001c

08004a5c <cleanup_stdio>:
 8004a5c:	6841      	ldr	r1, [r0, #4]
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <cleanup_stdio+0x34>)
 8004a60:	4299      	cmp	r1, r3
 8004a62:	b510      	push	{r4, lr}
 8004a64:	4604      	mov	r4, r0
 8004a66:	d001      	beq.n	8004a6c <cleanup_stdio+0x10>
 8004a68:	f000 fa32 	bl	8004ed0 <_fflush_r>
 8004a6c:	68a1      	ldr	r1, [r4, #8]
 8004a6e:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <cleanup_stdio+0x38>)
 8004a70:	4299      	cmp	r1, r3
 8004a72:	d002      	beq.n	8004a7a <cleanup_stdio+0x1e>
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 fa2b 	bl	8004ed0 <_fflush_r>
 8004a7a:	68e1      	ldr	r1, [r4, #12]
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <cleanup_stdio+0x3c>)
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d004      	beq.n	8004a8c <cleanup_stdio+0x30>
 8004a82:	4620      	mov	r0, r4
 8004a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a88:	f000 ba22 	b.w	8004ed0 <_fflush_r>
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000170 	.word	0x20000170
 8004a94:	200001d8 	.word	0x200001d8
 8004a98:	20000240 	.word	0x20000240

08004a9c <global_stdio_init.part.0>:
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <global_stdio_init.part.0+0x30>)
 8004aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8004ad0 <global_stdio_init.part.0+0x34>)
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad4 <global_stdio_init.part.0+0x38>)
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2104      	movs	r1, #4
 8004aac:	f7ff ff94 	bl	80049d8 <std>
 8004ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2109      	movs	r1, #9
 8004ab8:	f7ff ff8e 	bl	80049d8 <std>
 8004abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac6:	2112      	movs	r1, #18
 8004ac8:	f7ff bf86 	b.w	80049d8 <std>
 8004acc:	200002a8 	.word	0x200002a8
 8004ad0:	20000170 	.word	0x20000170
 8004ad4:	08004a45 	.word	0x08004a45

08004ad8 <__sfp_lock_acquire>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	@ (8004ae0 <__sfp_lock_acquire+0x8>)
 8004ada:	f000 b8d0 	b.w	8004c7e <__retarget_lock_acquire_recursive>
 8004ade:	bf00      	nop
 8004ae0:	200002ad 	.word	0x200002ad

08004ae4 <__sfp_lock_release>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	@ (8004aec <__sfp_lock_release+0x8>)
 8004ae6:	f000 b8cb 	b.w	8004c80 <__retarget_lock_release_recursive>
 8004aea:	bf00      	nop
 8004aec:	200002ad 	.word	0x200002ad

08004af0 <__sinit>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4604      	mov	r4, r0
 8004af4:	f7ff fff0 	bl	8004ad8 <__sfp_lock_acquire>
 8004af8:	6a23      	ldr	r3, [r4, #32]
 8004afa:	b11b      	cbz	r3, 8004b04 <__sinit+0x14>
 8004afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b00:	f7ff bff0 	b.w	8004ae4 <__sfp_lock_release>
 8004b04:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <__sinit+0x28>)
 8004b06:	6223      	str	r3, [r4, #32]
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <__sinit+0x2c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f5      	bne.n	8004afc <__sinit+0xc>
 8004b10:	f7ff ffc4 	bl	8004a9c <global_stdio_init.part.0>
 8004b14:	e7f2      	b.n	8004afc <__sinit+0xc>
 8004b16:	bf00      	nop
 8004b18:	08004a5d 	.word	0x08004a5d
 8004b1c:	200002a8 	.word	0x200002a8

08004b20 <_fwalk_sglue>:
 8004b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	4607      	mov	r7, r0
 8004b26:	4688      	mov	r8, r1
 8004b28:	4614      	mov	r4, r2
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b30:	f1b9 0901 	subs.w	r9, r9, #1
 8004b34:	d505      	bpl.n	8004b42 <_fwalk_sglue+0x22>
 8004b36:	6824      	ldr	r4, [r4, #0]
 8004b38:	2c00      	cmp	r4, #0
 8004b3a:	d1f7      	bne.n	8004b2c <_fwalk_sglue+0xc>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b42:	89ab      	ldrh	r3, [r5, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d907      	bls.n	8004b58 <_fwalk_sglue+0x38>
 8004b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	d003      	beq.n	8004b58 <_fwalk_sglue+0x38>
 8004b50:	4629      	mov	r1, r5
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c0      	blx	r8
 8004b56:	4306      	orrs	r6, r0
 8004b58:	3568      	adds	r5, #104	@ 0x68
 8004b5a:	e7e9      	b.n	8004b30 <_fwalk_sglue+0x10>

08004b5c <_puts_r>:
 8004b5c:	6a03      	ldr	r3, [r0, #32]
 8004b5e:	b570      	push	{r4, r5, r6, lr}
 8004b60:	6884      	ldr	r4, [r0, #8]
 8004b62:	4605      	mov	r5, r0
 8004b64:	460e      	mov	r6, r1
 8004b66:	b90b      	cbnz	r3, 8004b6c <_puts_r+0x10>
 8004b68:	f7ff ffc2 	bl	8004af0 <__sinit>
 8004b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b6e:	07db      	lsls	r3, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <_puts_r+0x22>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	0598      	lsls	r0, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_puts_r+0x22>
 8004b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b7a:	f000 f880 	bl	8004c7e <__retarget_lock_acquire_recursive>
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	0719      	lsls	r1, r3, #28
 8004b82:	d502      	bpl.n	8004b8a <_puts_r+0x2e>
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d135      	bne.n	8004bf6 <_puts_r+0x9a>
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 fa55 	bl	800503c <__swsetup_r>
 8004b92:	b380      	cbz	r0, 8004bf6 <_puts_r+0x9a>
 8004b94:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b9a:	07da      	lsls	r2, r3, #31
 8004b9c:	d405      	bmi.n	8004baa <_puts_r+0x4e>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	059b      	lsls	r3, r3, #22
 8004ba2:	d402      	bmi.n	8004baa <_puts_r+0x4e>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ba6:	f000 f86b 	bl	8004c80 <__retarget_lock_release_recursive>
 8004baa:	4628      	mov	r0, r5
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da04      	bge.n	8004bbc <_puts_r+0x60>
 8004bb2:	69a2      	ldr	r2, [r4, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dc17      	bgt.n	8004be8 <_puts_r+0x8c>
 8004bb8:	290a      	cmp	r1, #10
 8004bba:	d015      	beq.n	8004be8 <_puts_r+0x8c>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	6022      	str	r2, [r4, #0]
 8004bc2:	7019      	strb	r1, [r3, #0]
 8004bc4:	68a3      	ldr	r3, [r4, #8]
 8004bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	2900      	cmp	r1, #0
 8004bd0:	d1ed      	bne.n	8004bae <_puts_r+0x52>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da11      	bge.n	8004bfa <_puts_r+0x9e>
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	210a      	movs	r1, #10
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 f9ef 	bl	8004fbe <__swbuf_r>
 8004be0:	3001      	adds	r0, #1
 8004be2:	d0d7      	beq.n	8004b94 <_puts_r+0x38>
 8004be4:	250a      	movs	r5, #10
 8004be6:	e7d7      	b.n	8004b98 <_puts_r+0x3c>
 8004be8:	4622      	mov	r2, r4
 8004bea:	4628      	mov	r0, r5
 8004bec:	f000 f9e7 	bl	8004fbe <__swbuf_r>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d1e7      	bne.n	8004bc4 <_puts_r+0x68>
 8004bf4:	e7ce      	b.n	8004b94 <_puts_r+0x38>
 8004bf6:	3e01      	subs	r6, #1
 8004bf8:	e7e4      	b.n	8004bc4 <_puts_r+0x68>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	220a      	movs	r2, #10
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e7ee      	b.n	8004be4 <_puts_r+0x88>
	...

08004c08 <puts>:
 8004c08:	4b02      	ldr	r3, [pc, #8]	@ (8004c14 <puts+0xc>)
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	f7ff bfa5 	b.w	8004b5c <_puts_r>
 8004c12:	bf00      	nop
 8004c14:	20000018 	.word	0x20000018

08004c18 <memset>:
 8004c18:	4402      	add	r2, r0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	f803 1b01 	strb.w	r1, [r3], #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <__errno>:
 8004c28:	4b01      	ldr	r3, [pc, #4]	@ (8004c30 <__errno+0x8>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000018 	.word	0x20000018

08004c34 <__libc_init_array>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	4d0d      	ldr	r5, [pc, #52]	@ (8004c6c <__libc_init_array+0x38>)
 8004c38:	4c0d      	ldr	r4, [pc, #52]	@ (8004c70 <__libc_init_array+0x3c>)
 8004c3a:	1b64      	subs	r4, r4, r5
 8004c3c:	10a4      	asrs	r4, r4, #2
 8004c3e:	2600      	movs	r6, #0
 8004c40:	42a6      	cmp	r6, r4
 8004c42:	d109      	bne.n	8004c58 <__libc_init_array+0x24>
 8004c44:	4d0b      	ldr	r5, [pc, #44]	@ (8004c74 <__libc_init_array+0x40>)
 8004c46:	4c0c      	ldr	r4, [pc, #48]	@ (8004c78 <__libc_init_array+0x44>)
 8004c48:	f000 fb72 	bl	8005330 <_init>
 8004c4c:	1b64      	subs	r4, r4, r5
 8004c4e:	10a4      	asrs	r4, r4, #2
 8004c50:	2600      	movs	r6, #0
 8004c52:	42a6      	cmp	r6, r4
 8004c54:	d105      	bne.n	8004c62 <__libc_init_array+0x2e>
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5c:	4798      	blx	r3
 8004c5e:	3601      	adds	r6, #1
 8004c60:	e7ee      	b.n	8004c40 <__libc_init_array+0xc>
 8004c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c66:	4798      	blx	r3
 8004c68:	3601      	adds	r6, #1
 8004c6a:	e7f2      	b.n	8004c52 <__libc_init_array+0x1e>
 8004c6c:	080053e8 	.word	0x080053e8
 8004c70:	080053e8 	.word	0x080053e8
 8004c74:	080053e8 	.word	0x080053e8
 8004c78:	080053ec 	.word	0x080053ec

08004c7c <__retarget_lock_init_recursive>:
 8004c7c:	4770      	bx	lr

08004c7e <__retarget_lock_acquire_recursive>:
 8004c7e:	4770      	bx	lr

08004c80 <__retarget_lock_release_recursive>:
 8004c80:	4770      	bx	lr
	...

08004c84 <sbrk_aligned>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4e0f      	ldr	r6, [pc, #60]	@ (8004cc4 <sbrk_aligned+0x40>)
 8004c88:	460c      	mov	r4, r1
 8004c8a:	6831      	ldr	r1, [r6, #0]
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	b911      	cbnz	r1, 8004c96 <sbrk_aligned+0x12>
 8004c90:	f000 fac0 	bl	8005214 <_sbrk_r>
 8004c94:	6030      	str	r0, [r6, #0]
 8004c96:	4621      	mov	r1, r4
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 fabb 	bl	8005214 <_sbrk_r>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	d103      	bne.n	8004caa <sbrk_aligned+0x26>
 8004ca2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
 8004caa:	1cc4      	adds	r4, r0, #3
 8004cac:	f024 0403 	bic.w	r4, r4, #3
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d0f8      	beq.n	8004ca6 <sbrk_aligned+0x22>
 8004cb4:	1a21      	subs	r1, r4, r0
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 faac 	bl	8005214 <_sbrk_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d1f2      	bne.n	8004ca6 <sbrk_aligned+0x22>
 8004cc0:	e7ef      	b.n	8004ca2 <sbrk_aligned+0x1e>
 8004cc2:	bf00      	nop
 8004cc4:	200002b0 	.word	0x200002b0

08004cc8 <_malloc_r>:
 8004cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	1ccd      	adds	r5, r1, #3
 8004cce:	f025 0503 	bic.w	r5, r5, #3
 8004cd2:	3508      	adds	r5, #8
 8004cd4:	2d0c      	cmp	r5, #12
 8004cd6:	bf38      	it	cc
 8004cd8:	250c      	movcc	r5, #12
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	4606      	mov	r6, r0
 8004cde:	db01      	blt.n	8004ce4 <_malloc_r+0x1c>
 8004ce0:	42a9      	cmp	r1, r5
 8004ce2:	d904      	bls.n	8004cee <_malloc_r+0x26>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dc4 <_malloc_r+0xfc>
 8004cf2:	f000 f915 	bl	8004f20 <__malloc_lock>
 8004cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	bb44      	cbnz	r4, 8004d50 <_malloc_r+0x88>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	f7ff ffbf 	bl	8004c84 <sbrk_aligned>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	4604      	mov	r4, r0
 8004d0a:	d158      	bne.n	8004dbe <_malloc_r+0xf6>
 8004d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d10:	4627      	mov	r7, r4
 8004d12:	2f00      	cmp	r7, #0
 8004d14:	d143      	bne.n	8004d9e <_malloc_r+0xd6>
 8004d16:	2c00      	cmp	r4, #0
 8004d18:	d04b      	beq.n	8004db2 <_malloc_r+0xea>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	4630      	mov	r0, r6
 8004d20:	eb04 0903 	add.w	r9, r4, r3
 8004d24:	f000 fa76 	bl	8005214 <_sbrk_r>
 8004d28:	4581      	cmp	r9, r0
 8004d2a:	d142      	bne.n	8004db2 <_malloc_r+0xea>
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	1a6d      	subs	r5, r5, r1
 8004d30:	4629      	mov	r1, r5
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7ff ffa6 	bl	8004c84 <sbrk_aligned>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d03a      	beq.n	8004db2 <_malloc_r+0xea>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	442b      	add	r3, r5
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	f8d8 3000 	ldr.w	r3, [r8]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	bb62      	cbnz	r2, 8004da4 <_malloc_r+0xdc>
 8004d4a:	f8c8 7000 	str.w	r7, [r8]
 8004d4e:	e00f      	b.n	8004d70 <_malloc_r+0xa8>
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	1b52      	subs	r2, r2, r5
 8004d54:	d420      	bmi.n	8004d98 <_malloc_r+0xd0>
 8004d56:	2a0b      	cmp	r2, #11
 8004d58:	d917      	bls.n	8004d8a <_malloc_r+0xc2>
 8004d5a:	1961      	adds	r1, r4, r5
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	6025      	str	r5, [r4, #0]
 8004d60:	bf18      	it	ne
 8004d62:	6059      	strne	r1, [r3, #4]
 8004d64:	6863      	ldr	r3, [r4, #4]
 8004d66:	bf08      	it	eq
 8004d68:	f8c8 1000 	streq.w	r1, [r8]
 8004d6c:	5162      	str	r2, [r4, r5]
 8004d6e:	604b      	str	r3, [r1, #4]
 8004d70:	4630      	mov	r0, r6
 8004d72:	f000 f8db 	bl	8004f2c <__malloc_unlock>
 8004d76:	f104 000b 	add.w	r0, r4, #11
 8004d7a:	1d23      	adds	r3, r4, #4
 8004d7c:	f020 0007 	bic.w	r0, r0, #7
 8004d80:	1ac2      	subs	r2, r0, r3
 8004d82:	bf1c      	itt	ne
 8004d84:	1a1b      	subne	r3, r3, r0
 8004d86:	50a3      	strne	r3, [r4, r2]
 8004d88:	e7af      	b.n	8004cea <_malloc_r+0x22>
 8004d8a:	6862      	ldr	r2, [r4, #4]
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	bf0c      	ite	eq
 8004d90:	f8c8 2000 	streq.w	r2, [r8]
 8004d94:	605a      	strne	r2, [r3, #4]
 8004d96:	e7eb      	b.n	8004d70 <_malloc_r+0xa8>
 8004d98:	4623      	mov	r3, r4
 8004d9a:	6864      	ldr	r4, [r4, #4]
 8004d9c:	e7ae      	b.n	8004cfc <_malloc_r+0x34>
 8004d9e:	463c      	mov	r4, r7
 8004da0:	687f      	ldr	r7, [r7, #4]
 8004da2:	e7b6      	b.n	8004d12 <_malloc_r+0x4a>
 8004da4:	461a      	mov	r2, r3
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d1fb      	bne.n	8004da4 <_malloc_r+0xdc>
 8004dac:	2300      	movs	r3, #0
 8004dae:	6053      	str	r3, [r2, #4]
 8004db0:	e7de      	b.n	8004d70 <_malloc_r+0xa8>
 8004db2:	230c      	movs	r3, #12
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 f8b8 	bl	8004f2c <__malloc_unlock>
 8004dbc:	e794      	b.n	8004ce8 <_malloc_r+0x20>
 8004dbe:	6005      	str	r5, [r0, #0]
 8004dc0:	e7d6      	b.n	8004d70 <_malloc_r+0xa8>
 8004dc2:	bf00      	nop
 8004dc4:	200002b4 	.word	0x200002b4

08004dc8 <__sflush_r>:
 8004dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd0:	0716      	lsls	r6, r2, #28
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	d454      	bmi.n	8004e82 <__sflush_r+0xba>
 8004dd8:	684b      	ldr	r3, [r1, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	dc02      	bgt.n	8004de4 <__sflush_r+0x1c>
 8004dde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dd48      	ble.n	8004e76 <__sflush_r+0xae>
 8004de4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	d045      	beq.n	8004e76 <__sflush_r+0xae>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004df0:	682f      	ldr	r7, [r5, #0]
 8004df2:	6a21      	ldr	r1, [r4, #32]
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	d030      	beq.n	8004e5a <__sflush_r+0x92>
 8004df8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	0759      	lsls	r1, r3, #29
 8004dfe:	d505      	bpl.n	8004e0c <__sflush_r+0x44>
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e06:	b10b      	cbz	r3, 8004e0c <__sflush_r+0x44>
 8004e08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e0a:	1ad2      	subs	r2, r2, r3
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e10:	6a21      	ldr	r1, [r4, #32]
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b0      	blx	r6
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	d106      	bne.n	8004e2a <__sflush_r+0x62>
 8004e1c:	6829      	ldr	r1, [r5, #0]
 8004e1e:	291d      	cmp	r1, #29
 8004e20:	d82b      	bhi.n	8004e7a <__sflush_r+0xb2>
 8004e22:	4a2a      	ldr	r2, [pc, #168]	@ (8004ecc <__sflush_r+0x104>)
 8004e24:	40ca      	lsrs	r2, r1
 8004e26:	07d6      	lsls	r6, r2, #31
 8004e28:	d527      	bpl.n	8004e7a <__sflush_r+0xb2>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	6062      	str	r2, [r4, #4]
 8004e2e:	04d9      	lsls	r1, r3, #19
 8004e30:	6922      	ldr	r2, [r4, #16]
 8004e32:	6022      	str	r2, [r4, #0]
 8004e34:	d504      	bpl.n	8004e40 <__sflush_r+0x78>
 8004e36:	1c42      	adds	r2, r0, #1
 8004e38:	d101      	bne.n	8004e3e <__sflush_r+0x76>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	b903      	cbnz	r3, 8004e40 <__sflush_r+0x78>
 8004e3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e42:	602f      	str	r7, [r5, #0]
 8004e44:	b1b9      	cbz	r1, 8004e76 <__sflush_r+0xae>
 8004e46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	d002      	beq.n	8004e54 <__sflush_r+0x8c>
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 fa24 	bl	800529c <_free_r>
 8004e54:	2300      	movs	r3, #0
 8004e56:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e58:	e00d      	b.n	8004e76 <__sflush_r+0xae>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b0      	blx	r6
 8004e60:	4602      	mov	r2, r0
 8004e62:	1c50      	adds	r0, r2, #1
 8004e64:	d1c9      	bne.n	8004dfa <__sflush_r+0x32>
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0c6      	beq.n	8004dfa <__sflush_r+0x32>
 8004e6c:	2b1d      	cmp	r3, #29
 8004e6e:	d001      	beq.n	8004e74 <__sflush_r+0xac>
 8004e70:	2b16      	cmp	r3, #22
 8004e72:	d11e      	bne.n	8004eb2 <__sflush_r+0xea>
 8004e74:	602f      	str	r7, [r5, #0]
 8004e76:	2000      	movs	r0, #0
 8004e78:	e022      	b.n	8004ec0 <__sflush_r+0xf8>
 8004e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	e01b      	b.n	8004eba <__sflush_r+0xf2>
 8004e82:	690f      	ldr	r7, [r1, #16]
 8004e84:	2f00      	cmp	r7, #0
 8004e86:	d0f6      	beq.n	8004e76 <__sflush_r+0xae>
 8004e88:	0793      	lsls	r3, r2, #30
 8004e8a:	680e      	ldr	r6, [r1, #0]
 8004e8c:	bf08      	it	eq
 8004e8e:	694b      	ldreq	r3, [r1, #20]
 8004e90:	600f      	str	r7, [r1, #0]
 8004e92:	bf18      	it	ne
 8004e94:	2300      	movne	r3, #0
 8004e96:	eba6 0807 	sub.w	r8, r6, r7
 8004e9a:	608b      	str	r3, [r1, #8]
 8004e9c:	f1b8 0f00 	cmp.w	r8, #0
 8004ea0:	dde9      	ble.n	8004e76 <__sflush_r+0xae>
 8004ea2:	6a21      	ldr	r1, [r4, #32]
 8004ea4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ea6:	4643      	mov	r3, r8
 8004ea8:	463a      	mov	r2, r7
 8004eaa:	4628      	mov	r0, r5
 8004eac:	47b0      	blx	r6
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	dc08      	bgt.n	8004ec4 <__sflush_r+0xfc>
 8004eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec4:	4407      	add	r7, r0
 8004ec6:	eba8 0800 	sub.w	r8, r8, r0
 8004eca:	e7e7      	b.n	8004e9c <__sflush_r+0xd4>
 8004ecc:	20400001 	.word	0x20400001

08004ed0 <_fflush_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	b913      	cbnz	r3, 8004ee0 <_fflush_r+0x10>
 8004eda:	2500      	movs	r5, #0
 8004edc:	4628      	mov	r0, r5
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	b118      	cbz	r0, 8004eea <_fflush_r+0x1a>
 8004ee2:	6a03      	ldr	r3, [r0, #32]
 8004ee4:	b90b      	cbnz	r3, 8004eea <_fflush_r+0x1a>
 8004ee6:	f7ff fe03 	bl	8004af0 <__sinit>
 8004eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f3      	beq.n	8004eda <_fflush_r+0xa>
 8004ef2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ef4:	07d0      	lsls	r0, r2, #31
 8004ef6:	d404      	bmi.n	8004f02 <_fflush_r+0x32>
 8004ef8:	0599      	lsls	r1, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_fflush_r+0x32>
 8004efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efe:	f7ff febe 	bl	8004c7e <__retarget_lock_acquire_recursive>
 8004f02:	4628      	mov	r0, r5
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7ff ff5f 	bl	8004dc8 <__sflush_r>
 8004f0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f0c:	07da      	lsls	r2, r3, #31
 8004f0e:	4605      	mov	r5, r0
 8004f10:	d4e4      	bmi.n	8004edc <_fflush_r+0xc>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	059b      	lsls	r3, r3, #22
 8004f16:	d4e1      	bmi.n	8004edc <_fflush_r+0xc>
 8004f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f1a:	f7ff feb1 	bl	8004c80 <__retarget_lock_release_recursive>
 8004f1e:	e7dd      	b.n	8004edc <_fflush_r+0xc>

08004f20 <__malloc_lock>:
 8004f20:	4801      	ldr	r0, [pc, #4]	@ (8004f28 <__malloc_lock+0x8>)
 8004f22:	f7ff beac 	b.w	8004c7e <__retarget_lock_acquire_recursive>
 8004f26:	bf00      	nop
 8004f28:	200002ac 	.word	0x200002ac

08004f2c <__malloc_unlock>:
 8004f2c:	4801      	ldr	r0, [pc, #4]	@ (8004f34 <__malloc_unlock+0x8>)
 8004f2e:	f7ff bea7 	b.w	8004c80 <__retarget_lock_release_recursive>
 8004f32:	bf00      	nop
 8004f34:	200002ac 	.word	0x200002ac

08004f38 <__sread>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	f000 f956 	bl	80051f0 <_read_r>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	bfab      	itete	ge
 8004f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f4c:	181b      	addge	r3, r3, r0
 8004f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f52:	bfac      	ite	ge
 8004f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f56:	81a3      	strhlt	r3, [r4, #12]
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <__swrite>:
 8004f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	461f      	mov	r7, r3
 8004f60:	898b      	ldrh	r3, [r1, #12]
 8004f62:	05db      	lsls	r3, r3, #23
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4616      	mov	r6, r2
 8004f6a:	d505      	bpl.n	8004f78 <__swrite+0x1e>
 8004f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f70:	2302      	movs	r3, #2
 8004f72:	2200      	movs	r2, #0
 8004f74:	f000 f92a 	bl	80051cc <_lseek_r>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	4628      	mov	r0, r5
 8004f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	f000 b951 	b.w	8005234 <_write_r>

08004f92 <__sseek>:
 8004f92:	b510      	push	{r4, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 f917 	bl	80051cc <_lseek_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	bf15      	itete	ne
 8004fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fae:	81a3      	strheq	r3, [r4, #12]
 8004fb0:	bf18      	it	ne
 8004fb2:	81a3      	strhne	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__sclose>:
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 b94d 	b.w	8005258 <_close_r>

08004fbe <__swbuf_r>:
 8004fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc0:	460e      	mov	r6, r1
 8004fc2:	4614      	mov	r4, r2
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	b118      	cbz	r0, 8004fd0 <__swbuf_r+0x12>
 8004fc8:	6a03      	ldr	r3, [r0, #32]
 8004fca:	b90b      	cbnz	r3, 8004fd0 <__swbuf_r+0x12>
 8004fcc:	f7ff fd90 	bl	8004af0 <__sinit>
 8004fd0:	69a3      	ldr	r3, [r4, #24]
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	071a      	lsls	r2, r3, #28
 8004fd8:	d501      	bpl.n	8004fde <__swbuf_r+0x20>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	b943      	cbnz	r3, 8004ff0 <__swbuf_r+0x32>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f82b 	bl	800503c <__swsetup_r>
 8004fe6:	b118      	cbz	r0, 8004ff0 <__swbuf_r+0x32>
 8004fe8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004fec:	4638      	mov	r0, r7
 8004fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	6922      	ldr	r2, [r4, #16]
 8004ff4:	1a98      	subs	r0, r3, r2
 8004ff6:	6963      	ldr	r3, [r4, #20]
 8004ff8:	b2f6      	uxtb	r6, r6
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	4637      	mov	r7, r6
 8004ffe:	dc05      	bgt.n	800500c <__swbuf_r+0x4e>
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f7ff ff64 	bl	8004ed0 <_fflush_r>
 8005008:	2800      	cmp	r0, #0
 800500a:	d1ed      	bne.n	8004fe8 <__swbuf_r+0x2a>
 800500c:	68a3      	ldr	r3, [r4, #8]
 800500e:	3b01      	subs	r3, #1
 8005010:	60a3      	str	r3, [r4, #8]
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	6022      	str	r2, [r4, #0]
 8005018:	701e      	strb	r6, [r3, #0]
 800501a:	6962      	ldr	r2, [r4, #20]
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	429a      	cmp	r2, r3
 8005020:	d004      	beq.n	800502c <__swbuf_r+0x6e>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	07db      	lsls	r3, r3, #31
 8005026:	d5e1      	bpl.n	8004fec <__swbuf_r+0x2e>
 8005028:	2e0a      	cmp	r6, #10
 800502a:	d1df      	bne.n	8004fec <__swbuf_r+0x2e>
 800502c:	4621      	mov	r1, r4
 800502e:	4628      	mov	r0, r5
 8005030:	f7ff ff4e 	bl	8004ed0 <_fflush_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	d0d9      	beq.n	8004fec <__swbuf_r+0x2e>
 8005038:	e7d6      	b.n	8004fe8 <__swbuf_r+0x2a>
	...

0800503c <__swsetup_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4b29      	ldr	r3, [pc, #164]	@ (80050e4 <__swsetup_r+0xa8>)
 8005040:	4605      	mov	r5, r0
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	460c      	mov	r4, r1
 8005046:	b118      	cbz	r0, 8005050 <__swsetup_r+0x14>
 8005048:	6a03      	ldr	r3, [r0, #32]
 800504a:	b90b      	cbnz	r3, 8005050 <__swsetup_r+0x14>
 800504c:	f7ff fd50 	bl	8004af0 <__sinit>
 8005050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005054:	0719      	lsls	r1, r3, #28
 8005056:	d422      	bmi.n	800509e <__swsetup_r+0x62>
 8005058:	06da      	lsls	r2, r3, #27
 800505a:	d407      	bmi.n	800506c <__swsetup_r+0x30>
 800505c:	2209      	movs	r2, #9
 800505e:	602a      	str	r2, [r5, #0]
 8005060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800506a:	e033      	b.n	80050d4 <__swsetup_r+0x98>
 800506c:	0758      	lsls	r0, r3, #29
 800506e:	d512      	bpl.n	8005096 <__swsetup_r+0x5a>
 8005070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005072:	b141      	cbz	r1, 8005086 <__swsetup_r+0x4a>
 8005074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005078:	4299      	cmp	r1, r3
 800507a:	d002      	beq.n	8005082 <__swsetup_r+0x46>
 800507c:	4628      	mov	r0, r5
 800507e:	f000 f90d 	bl	800529c <_free_r>
 8005082:	2300      	movs	r3, #0
 8005084:	6363      	str	r3, [r4, #52]	@ 0x34
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	2300      	movs	r3, #0
 8005090:	6063      	str	r3, [r4, #4]
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f043 0308 	orr.w	r3, r3, #8
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	b94b      	cbnz	r3, 80050b6 <__swsetup_r+0x7a>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ac:	d003      	beq.n	80050b6 <__swsetup_r+0x7a>
 80050ae:	4621      	mov	r1, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f83f 	bl	8005134 <__smakebuf_r>
 80050b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ba:	f013 0201 	ands.w	r2, r3, #1
 80050be:	d00a      	beq.n	80050d6 <__swsetup_r+0x9a>
 80050c0:	2200      	movs	r2, #0
 80050c2:	60a2      	str	r2, [r4, #8]
 80050c4:	6962      	ldr	r2, [r4, #20]
 80050c6:	4252      	negs	r2, r2
 80050c8:	61a2      	str	r2, [r4, #24]
 80050ca:	6922      	ldr	r2, [r4, #16]
 80050cc:	b942      	cbnz	r2, 80050e0 <__swsetup_r+0xa4>
 80050ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050d2:	d1c5      	bne.n	8005060 <__swsetup_r+0x24>
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	0799      	lsls	r1, r3, #30
 80050d8:	bf58      	it	pl
 80050da:	6962      	ldrpl	r2, [r4, #20]
 80050dc:	60a2      	str	r2, [r4, #8]
 80050de:	e7f4      	b.n	80050ca <__swsetup_r+0x8e>
 80050e0:	2000      	movs	r0, #0
 80050e2:	e7f7      	b.n	80050d4 <__swsetup_r+0x98>
 80050e4:	20000018 	.word	0x20000018

080050e8 <__swhatbuf_r>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f0:	2900      	cmp	r1, #0
 80050f2:	b096      	sub	sp, #88	@ 0x58
 80050f4:	4615      	mov	r5, r2
 80050f6:	461e      	mov	r6, r3
 80050f8:	da0d      	bge.n	8005116 <__swhatbuf_r+0x2e>
 80050fa:	89a3      	ldrh	r3, [r4, #12]
 80050fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	bf14      	ite	ne
 8005106:	2340      	movne	r3, #64	@ 0x40
 8005108:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800510c:	2000      	movs	r0, #0
 800510e:	6031      	str	r1, [r6, #0]
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	b016      	add	sp, #88	@ 0x58
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	466a      	mov	r2, sp
 8005118:	f000 f8ae 	bl	8005278 <_fstat_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	dbec      	blt.n	80050fa <__swhatbuf_r+0x12>
 8005120:	9901      	ldr	r1, [sp, #4]
 8005122:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005126:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800512a:	4259      	negs	r1, r3
 800512c:	4159      	adcs	r1, r3
 800512e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005132:	e7eb      	b.n	800510c <__swhatbuf_r+0x24>

08005134 <__smakebuf_r>:
 8005134:	898b      	ldrh	r3, [r1, #12]
 8005136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005138:	079d      	lsls	r5, r3, #30
 800513a:	4606      	mov	r6, r0
 800513c:	460c      	mov	r4, r1
 800513e:	d507      	bpl.n	8005150 <__smakebuf_r+0x1c>
 8005140:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	2301      	movs	r3, #1
 800514a:	6163      	str	r3, [r4, #20]
 800514c:	b003      	add	sp, #12
 800514e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005150:	ab01      	add	r3, sp, #4
 8005152:	466a      	mov	r2, sp
 8005154:	f7ff ffc8 	bl	80050e8 <__swhatbuf_r>
 8005158:	9f00      	ldr	r7, [sp, #0]
 800515a:	4605      	mov	r5, r0
 800515c:	4639      	mov	r1, r7
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff fdb2 	bl	8004cc8 <_malloc_r>
 8005164:	b948      	cbnz	r0, 800517a <__smakebuf_r+0x46>
 8005166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800516a:	059a      	lsls	r2, r3, #22
 800516c:	d4ee      	bmi.n	800514c <__smakebuf_r+0x18>
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	e7e2      	b.n	8005140 <__smakebuf_r+0xc>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	6020      	str	r0, [r4, #0]
 800517e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	9b01      	ldr	r3, [sp, #4]
 8005186:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800518a:	b15b      	cbz	r3, 80051a4 <__smakebuf_r+0x70>
 800518c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005190:	4630      	mov	r0, r6
 8005192:	f000 f80b 	bl	80051ac <_isatty_r>
 8005196:	b128      	cbz	r0, 80051a4 <__smakebuf_r+0x70>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	431d      	orrs	r5, r3
 80051a8:	81a5      	strh	r5, [r4, #12]
 80051aa:	e7cf      	b.n	800514c <__smakebuf_r+0x18>

080051ac <_isatty_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d06      	ldr	r5, [pc, #24]	@ (80051c8 <_isatty_r+0x1c>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f7fb fb51 	bl	800085e <_isatty>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_isatty_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_isatty_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	200002b8 	.word	0x200002b8

080051cc <_lseek_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d07      	ldr	r5, [pc, #28]	@ (80051ec <_lseek_r+0x20>)
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fb fb4a 	bl	8000874 <_lseek>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_lseek_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_lseek_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	200002b8 	.word	0x200002b8

080051f0 <_read_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d07      	ldr	r5, [pc, #28]	@ (8005210 <_read_r+0x20>)
 80051f4:	4604      	mov	r4, r0
 80051f6:	4608      	mov	r0, r1
 80051f8:	4611      	mov	r1, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f7fb faf4 	bl	80007ec <_read>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_read_r+0x1e>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_read_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	200002b8 	.word	0x200002b8

08005214 <_sbrk_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d06      	ldr	r5, [pc, #24]	@ (8005230 <_sbrk_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fb fb36 	bl	8000890 <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_sbrk_r+0x1a>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_sbrk_r+0x1a>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	200002b8 	.word	0x200002b8

08005234 <_write_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	@ (8005254 <_write_r+0x20>)
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fb f80c 	bl	8000260 <_write>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_write_r+0x1e>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_write_r+0x1e>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	200002b8 	.word	0x200002b8

08005258 <_close_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_close_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb fadf 	bl	8000826 <_close>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_close_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_close_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200002b8 	.word	0x200002b8

08005278 <_fstat_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4d07      	ldr	r5, [pc, #28]	@ (8005298 <_fstat_r+0x20>)
 800527c:	2300      	movs	r3, #0
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	f7fb fada 	bl	800083e <_fstat>
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	d102      	bne.n	8005294 <_fstat_r+0x1c>
 800528e:	682b      	ldr	r3, [r5, #0]
 8005290:	b103      	cbz	r3, 8005294 <_fstat_r+0x1c>
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	bd38      	pop	{r3, r4, r5, pc}
 8005296:	bf00      	nop
 8005298:	200002b8 	.word	0x200002b8

0800529c <_free_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4605      	mov	r5, r0
 80052a0:	2900      	cmp	r1, #0
 80052a2:	d041      	beq.n	8005328 <_free_r+0x8c>
 80052a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a8:	1f0c      	subs	r4, r1, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bfb8      	it	lt
 80052ae:	18e4      	addlt	r4, r4, r3
 80052b0:	f7ff fe36 	bl	8004f20 <__malloc_lock>
 80052b4:	4a1d      	ldr	r2, [pc, #116]	@ (800532c <_free_r+0x90>)
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	b933      	cbnz	r3, 80052c8 <_free_r+0x2c>
 80052ba:	6063      	str	r3, [r4, #4]
 80052bc:	6014      	str	r4, [r2, #0]
 80052be:	4628      	mov	r0, r5
 80052c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052c4:	f7ff be32 	b.w	8004f2c <__malloc_unlock>
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d908      	bls.n	80052de <_free_r+0x42>
 80052cc:	6820      	ldr	r0, [r4, #0]
 80052ce:	1821      	adds	r1, r4, r0
 80052d0:	428b      	cmp	r3, r1
 80052d2:	bf01      	itttt	eq
 80052d4:	6819      	ldreq	r1, [r3, #0]
 80052d6:	685b      	ldreq	r3, [r3, #4]
 80052d8:	1809      	addeq	r1, r1, r0
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	e7ed      	b.n	80052ba <_free_r+0x1e>
 80052de:	461a      	mov	r2, r3
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	b10b      	cbz	r3, 80052e8 <_free_r+0x4c>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d9fa      	bls.n	80052de <_free_r+0x42>
 80052e8:	6811      	ldr	r1, [r2, #0]
 80052ea:	1850      	adds	r0, r2, r1
 80052ec:	42a0      	cmp	r0, r4
 80052ee:	d10b      	bne.n	8005308 <_free_r+0x6c>
 80052f0:	6820      	ldr	r0, [r4, #0]
 80052f2:	4401      	add	r1, r0
 80052f4:	1850      	adds	r0, r2, r1
 80052f6:	4283      	cmp	r3, r0
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	d1e0      	bne.n	80052be <_free_r+0x22>
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	6053      	str	r3, [r2, #4]
 8005302:	4408      	add	r0, r1
 8005304:	6010      	str	r0, [r2, #0]
 8005306:	e7da      	b.n	80052be <_free_r+0x22>
 8005308:	d902      	bls.n	8005310 <_free_r+0x74>
 800530a:	230c      	movs	r3, #12
 800530c:	602b      	str	r3, [r5, #0]
 800530e:	e7d6      	b.n	80052be <_free_r+0x22>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	1821      	adds	r1, r4, r0
 8005314:	428b      	cmp	r3, r1
 8005316:	bf04      	itt	eq
 8005318:	6819      	ldreq	r1, [r3, #0]
 800531a:	685b      	ldreq	r3, [r3, #4]
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	bf04      	itt	eq
 8005320:	1809      	addeq	r1, r1, r0
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	6054      	str	r4, [r2, #4]
 8005326:	e7ca      	b.n	80052be <_free_r+0x22>
 8005328:	bd38      	pop	{r3, r4, r5, pc}
 800532a:	bf00      	nop
 800532c:	200002b4 	.word	0x200002b4

08005330 <_init>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr

0800533c <_fini>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr
